/**
 * @fileoverview Firestore Security Rules for the MineVision application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure access control based on user identity and defined roles.
 * It aims for strong authorization by default while maintaining flexibility for rapid prototyping.
 * Strict validation is applied to relational data, ensuring integrity across documents.
 *
 * Data Structure:
 * The database is structured with top-level collections representing various departments (e.g., `produksi`, `geologi`).
 * Some collections are secured based on user roles (`payrollRuns`, `employeeSalaries`, `payslips`, `performanceReviews`, `employeeObjectives`, `attendanceRecords`).
 * The `/users/{userId}` collection stores user profile data and is secured for owner-only access.
 * Other collections are publicly readable but restricted to owner-only writes (`kpi`, `announcements`, `productionStatus`).
 *
 * Key Security Decisions:
 * - User listing is generally disallowed unless explicitly required and secured.
 * - The rules explicitly deny any write operations that are not authorized.
 * - Read-only collections, if present, have open read permissions (`allow get, list: if true;`).
 * - The default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 * To improve security rule performance, data required for authorization decisions is often denormalized directly onto the documents being secured.
 * This avoids the need for costly `get()` operations within the rules.
 *   - Example: The `payslips` collection grants read access based on `request.auth.uid == resource.data.userId`, meaning the `userId` is stored directly on the payslip document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants read access to user profiles and restricts write access to the owner.
     * @path /users/{userId}
     * @allow (read) User with matching {userId} can read their profile.
     * @deny (create) User cannot create a profile with a different {userId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to KPI data and restricts write access.
     * @path /kpi/{kpiId}
     * @allow (read) Any user can read KPI data.
     * @deny (create) Only the owner can create KPI data.
     * @principle Public read access with owner-only writes.
     */
    match /kpi/{kpiId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to announcement data and restricts write access.
     * @path /announcements/{announcementId}
     * @allow (read) Any user can read announcement data.
     * @deny (create) Only the owner can create announcement data.
     * @principle Public read access with owner-only writes.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to production status data and restricts write access.
     * @path /productionStatus/{statusId}
     * @allow (read) Any user can read production status data.
     * @deny (create) Only the owner can create production status data.
     * @principle Public read access with owner-only writes.
     */
    match /productionStatus/{statusId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Restricts access to payment request data.
     * @path /paymentRequests/{requestId}
     * @deny (read) No one can read payment request data.
     * @deny (create) No one can create payment request data.
     * @principle Strict access control.
     */
    match /paymentRequests/{requestId} {
      allow get: if false;
      allow list: if false;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Restricts access to budget data.
     * @path /budgets/{budgetId}
     * @deny (read) No one can read budget data.
     * @deny (create) No one can create budget data.
     * @principle Strict access control.
     */
    match /budgets/{budgetId} {
      allow get: if false;
      allow list: if false;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants read access to leave requests for authenticated users and restricts write access.
     * @path /leaveRequests/{requestId}
     * @allow (read) Authenticated users can read leave request data.
     * @deny (create) Only the owner can create leave request data.
     * @principle Authenticated read access with owner-only writes.
     */
    match /leaveRequests/{requestId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Restricts access to user permissions data.
     * @path /userPermissions/{userId}
     * @deny (read) No one can read user permissions data.
     * @deny (create) No one can create user permissions data.
     * @principle Strict access control.
     */
    match /userPermissions/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Restricts access to helpdesk tickets data.
     * @path /helpdeskTickets/{ticketId}
     * @deny (read) No one can read helpdesk tickets data.
     * @deny (create) No one can create helpdesk tickets data.
     * @principle Strict access control.
     */
    match /helpdeskTickets/{ticketId} {
      allow get: if false;
      allow list: if false;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Restricts access to incident data.
     * @path /incidents/{incidentId}
     * @deny (read) No one can read incident data.
     * @deny (create) No one can create incident data.
     * @principle Strict access control.
     */
    match /incidents/{incidentId} {
      allow get: if false;
      allow list: if false;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Restricts access to inventory data.
     * @path /inventory/{itemId}
     * @deny (read) No one can read inventory data.
     * @deny (create) No one can create inventory data.
     * @principle Strict access control.
     */
    match /inventory/{itemId} {
      allow get: if false;
      allow list: if false;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Restricts access to purchase request data.
     * @path /purchaseRequestsSC/{prId}
     * @deny (read) No one can read purchase request data.
     * @deny (create) No one can create purchase request data.
     * @principle Strict access control.
     */
    match /purchaseRequestsSC/{prId} {
      allow get: if false;
      allow list: if false;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Restricts access to shipment data.
     * @path /shipments/{shipmentId}
     * @deny (read) No one can read shipment data.
     * @deny (create) No one can create shipment data.
     * @principle Strict access control.
     */
    match /shipments/{shipmentId} {
      allow get: if false;
      allow list: if false;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Restricts access to asset data.
     * @path /assets/{assetId}
     * @deny (read) No one can read asset data.
     * @deny (create) No one can create asset data.
     * @principle Strict access control.
     */
    match /assets/{assetId} {
      allow get: if false;
      allow list: if false;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Restricts access to maintenance task data.
     * @path /maintenanceTasks/{taskId}
     * @deny (read) No one can read maintenance task data.
     * @deny (create) No one can create maintenance task data.
     * @principle Strict access control.
     */
    match /maintenanceTasks/{taskId} {
      allow get: if false;
      allow list: if false;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

        /**
     * @description Restricts access to general ledger data.
     * @path /generalLedger/{entryId}
     */
    match /generalLedger/{entryId} {
        allow get: if false;
        allow list: if false;
        allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Restricts access to invoices data.
     * @path /invoices/{invoiceId}
     */
    match /invoices/{invoiceId} {
        allow get: if false;
        allow list: if false;
        allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Restricts access to bills data.
     * @path /bills/{billId}
     */
    match /bills/{billId} {
        allow get: if false;
        allow list: if false;
        allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Restricts access to bank accounts data.
     * @path /bankAccounts/{accountId}
     */
    match /bankAccounts/{accountId} {
        allow get: if false;
        allow list: if false;
        allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to payroll runs data based on user roles.
     * @path /payrollRuns/{runId}
     */
    match /payrollRuns/{runId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isExistingAdmin();
        allow delete: if isExistingAdmin();
    }

    /**
     * @description Manages access to employee salaries data based on user roles.
     * @path /employeeSalaries/{userId}
     */
    match /employeeSalaries/{userId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isExistingAdmin();
        allow delete: if isExistingAdmin();
    }

    /**
     * @description Allows access to payslips data based on user identity or role.
     * @path /payslips/{payslipId}
     */
    match /payslips/{payslipId} {
        allow get: if isOwner(resource.data.userId) || isAdmin();
        allow list: if isOwner(request.auth.uid) || isAdmin();
        allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages access to performance review data based on user roles.
     * @path /performanceReviews/{reviewId}
     */
    match /performanceReviews/{reviewId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isExistingAdmin();
        allow delete: if isExistingAdmin();
    }

        /**
     * @description Manages access to employee objectives data based on user roles.
     * @path /employeeObjectives/{objectiveId}
     */
    match /employeeObjectives/{objectiveId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isExistingAdmin();
        allow delete: if isExistingAdmin();
    }

    /**
     * @description Manages access to attendance records data based on user roles.
     * @path /attendanceRecords/{recordId}
     */
    match /attendanceRecords/{recordId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isExistingAdmin();
        allow delete: if isExistingAdmin();
    }

    /**
     * @description Allows public read access to produksi data.
     * @path /produksi/{produksiId}
     */
    match /produksi/{produksiId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows public read access to geologi data.
     * @path /geologi/{geologiId}
     */
    match /geologi/{geologiId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows public read access to pengolahan data.
     * @path /pengolahan/{pengolahanId}
     */
    match /pengolahan/{pengolahanId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows public read access to k3l data.
     * @path /k3l/{k3lId}
     */
    match /k3l/{k3lId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows public read access to keuangan data.
     * @path /keuangan/{keuanganId}
     */
    match /keuangan/{keuanganId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows public read access to sdm data.
     * @path /sdm/{sdmId}
     */
    match /sdm/{sdmId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows public read access to it data.
     * @path /it/{itId}
     */
    match /it/{itId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }

    function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
    }

    function isExistingAdmin() {
      return isSignedIn() && isAdmin() && resource != null;
    }
  }
}