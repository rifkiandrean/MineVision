/**
 * @fileoverview Firestore Security Rules for MineVision application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of owner-based and role-based access control.
 * User data is protected by ownership, while department data is publicly readable.
 * Certain collections like payment requests, budgets, and leave requests may need role-based access.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only by the user.
 * - /kpi/{kpiId}: Stores Key Performance Indicators.
 * - /announcements/{announcementId}: Stores global announcements.
 * - /productionStatus/{statusId}: Stores real-time production statuses.
 * - /paymentRequests/{requestId}: Stores payment requests, potentially with role-based access.
 * - /budgets/{budgetId}: Stores budget data.
 * - /leaveRequests/{requestId}: Stores leave requests.
 * - /userPermissions/{userId}: Stores user permissions, accessible only by the user.
 * - /helpdeskTickets/{ticketId}: Stores helpdesk tickets.
 * - /produksi/{produksiId}: Stores produksi department data.
 * - /geologi/{geologiId}: Stores geologi department data.
 * - /pengolahan/{pengolahanId}: Stores pengolahan department data.
 * - /k3l/{k3lId}: Stores K3L department data.
 * - /keuangan/{keuanganId}: Stores keuangan department data.
 * - /sdm/{sdmId}: Stores SDM department data.
 * - /it/{itId}: Stores IT department data.
 *
 * Key Security Decisions:
 * - User listing is denied to protect user privacy.
 * - Department data (produksi, geologi, etc.) is publicly readable.
 *
 * Denormalization for Authorization:
 *  None used in this version. Further iteration should consider denormalizing
 *  department and role information onto documents to improve rule performance
 *  and avoid costly `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can read their profile.
     * @allow (update) User with UID 'user123' can update their profile.
     * @allow (delete) User with UID 'user123' can delete their profile.
     * @deny (create) User with UID 'user456' cannot create a profile for user 'user123'.
     * @deny (get) User with UID 'user456' cannot read the profile of user 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.uid == resource.data.uid;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to KPI documents.
     * @path /kpi/{kpiId}
     * @allow (get) Any user can read KPI data.
     * @allow (list) Any user can list KPI data.
     * @deny (create) No user can create KPI data without specific authorization.
     * @principle Public read access with restricted writes.
     */
    match /kpi/{kpiId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Announcement documents.
     * @path /announcements/{announcementId}
     * @allow (get) Any user can read announcement data.
     * @allow (list) Any user can list announcement data.
     * @deny (create) No user can create announcement data without specific authorization.
     * @principle Public read access with restricted writes.
     */
    match /announcements/{announcementId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to ProductionStatus documents.
     * @path /productionStatus/{statusId}
     * @allow (get) Any user can read production status data.
     * @allow (list) Any user can list production status data.
     * @deny (create) No user can create production status data without specific authorization.
     * @principle Public read access with restricted writes.
     */
    match /productionStatus/{statusId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to PaymentRequest documents.
     * @path /paymentRequests/{requestId}
     * @allow (get) Any user can read payment request data.
     * @allow (list) Any user can list payment request data.
     * @deny (create) No user can create payment request data without specific authorization.
     * @principle Public read access with restricted writes.
     */
    match /paymentRequests/{requestId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Budget documents.
     * @path /budgets/{budgetId}
     * @allow (get) Any user can read budget data.
     * @allow (list) Any user can list budget data.
     * @deny (create) No user can create budget data without specific authorization.
     * @principle Public read access with restricted writes.
     */
    match /budgets/{budgetId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to LeaveRequest documents.
     * @path /leaveRequests/{requestId}
     * @allow (get) Any user can read leave request data.
     * @allow (list) Any user can list leave request data.
     * @deny (create) No user can create leave request data without specific authorization.
     * @principle Public read access with restricted writes.
     */
    match /leaveRequests/{requestId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to UserPermissions documents.
     * @path /userPermissions/{userId}
     * @allow (create) User with UID 'user123' can create their own permissions if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can read their permissions.
     * @allow (update) User with UID 'user123' can update their permissions.
     * @allow (delete) User with UID 'user123' can delete their permissions.
     * @deny (create) User with UID 'user456' cannot create permissions for user 'user123'.
     * @deny (get) User with UID 'user456' cannot read the permissions of user 'user123'.
     * @principle Enforces document ownership for user permissions.
     */
    match /userPermissions/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.userId == resource.data.userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to HelpdeskTicket documents.
     * @path /helpdeskTickets/{ticketId}
     * @allow (get) Any user can read helpdesk ticket data.
     * @allow (list) Any user can list helpdesk ticket data.
     * @deny (create) No user can create helpdesk ticket data without specific authorization.
     * @principle Public read access with restricted writes.
     */
    match /helpdeskTickets/{ticketId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
    
    /**
     * @description Allows public read access to produksi department data.
     * @path /produksi/{produksiId}
     * @allow (get) Any user can read produksi data.
     * @allow (list) Any user can list produksi data.
     * @deny (create) No user can create produksi data.
     * @principle Public read access with no write access.
     */
    match /produksi/{produksiId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to geologi department data.
     * @path /geologi/{geologiId}
     * @allow (get) Any user can read geologi data.
     * @allow (list) Any user can list geologi data.
     * @deny (create) No user can create geologi data.
     * @principle Public read access with no write access.
     */
    match /geologi/{geologiId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to pengolahan department data.
     * @path /pengolahan/{pengolahanId}
     * @allow (get) Any user can read pengolahan data.
     * @allow (list) Any user can list pengolahan data.
     * @deny (create) No user can create pengolahan data.
     * @principle Public read access with no write access.
     */
    match /pengolahan/{pengolahanId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to K3L department data.
     * @path /k3l/{k3lId}
     * @allow (get) Any user can read K3L data.
     * @allow (list) Any user can list K3L data.
     * @deny (create) No user can create K3L data.
     * @principle Public read access with no write access.
     */
    match /k3l/{k3lId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to keuangan department data.
     * @path /keuangan/{keuanganId}
     * @allow (get) Any user can read keuangan data.
     * @allow (list) Any user can list keuangan data.
     * @deny (create) No user can create keuangan data.
     * @principle Public read access with no write access.
     */
    match /keuangan/{keuanganId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to SDM department data.
     * @path /sdm/{sdmId}
     * @allow (get) Any user can read SDM data.
     * @allow (list) Any user can list SDM data.
     * @deny (create) No user can create SDM data.
     * @principle Public read access with no write access.
     */
    match /sdm/{sdmId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to IT department data.
     * @path /it/{itId}
     * @allow (get) Any user can read IT data.
     * @allow (list) Any user can list IT data.
     * @deny (create) No user can create IT data.
     * @principle Public read access with no write access.
     */
    match /it/{itId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}