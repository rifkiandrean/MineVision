/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a hybrid security model with user-based access for some collections and role-based access for others.
 *
 * Data Structure:
 * - User data is stored under `/users/{userId}`.
 * - Department-specific data resides in top-level collections like `/produksi/{produksiId}`, `/geologi/{geologiId}`, etc.
 * - Payroll and performance data has role based access.
 *
 * Key Security Decisions:
 * - Users can read their own profile data.
 * - Payroll and performance data is restricted to users with specific roles.
 * - Most departmental data collections are open for read access (prototyping mode).
 * - The `attendanceRecords` collection restricts write access to specific roles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read their own profile data.
     * @path /users/{userId}
     * @allow (get) Signed-in user requesting their own data.
     * @deny (get) Signed-in user requesting another user's data.
     * @principle Enforces document ownership for reads.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Allows public read access to KPI documents.
     * @path /kpi/{kpiId}
     * @allow (get) Any user can read KPI data.
     * @deny (create) No one can create KPI data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /kpi/{kpiId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to announcement documents.
     * @path /announcements/{announcementId}
     * @allow (get) Any user can read announcement data.
     * @deny (create) No one can create announcement data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to production status documents.
     * @path /productionStatus/{statusId}
     * @allow (get) Any user can read production status data.
     * @deny (create) No one can create production status data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /productionStatus/{statusId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to payment request documents.
     * @path /paymentRequests/{requestId}
     * @allow (get) Any user can read payment request data.
     * @deny (create) No one can create payment request data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /paymentRequests/{requestId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to budget documents.
     * @path /budgets/{budgetId}
     * @allow (get) Any user can read budget data.
     * @deny (create) No one can create budget data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /budgets/{budgetId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows any signed-in user to read leave request data.
     * @path /leaveRequests/{requestId}
     * @allow (get) Signed-in user reading leave request data.
     * @deny (create) No one can create leave request data.
     * @principle Allows signed in read access with no write access (prototype)
     */
    match /leaveRequests/{requestId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows public read access to user permission documents.
     * @path /userPermissions/{userId}
     * @allow (get) Any user can read user permission data.
     * @deny (create) No one can create user permission data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /userPermissions/{userId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to helpdesk ticket documents.
     * @path /helpdeskTickets/{ticketId}
     * @allow (get) Any user can read helpdesk ticket data.
     * @deny (create) No one can create helpdesk ticket data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /helpdeskTickets/{ticketId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to incident documents.
     * @path /incidents/{incidentId}
     * @allow (get) Any user can read incident data.
     * @deny (create) No one can create incident data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /incidents/{incidentId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to inventory documents.
     * @path /inventory/{itemId}
     * @allow (get) Any user can read inventory data.
     * @deny (create) No one can create inventory data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /inventory/{itemId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to purchase request documents.
     * @path /purchaseRequestsSC/{prId}
     * @allow (get) Any user can read purchase request data.
     * @deny (create) No one can create purchase request data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /purchaseRequestsSC/{prId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to shipment documents.
     * @path /shipments/{shipmentId}
     * @allow (get) Any user can read shipment data.
     * @deny (create) No one can create shipment data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /shipments/{shipmentId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to asset documents.
     * @path /assets/{assetId}
     * @allow (get) Any user can read asset data.
     * @deny (create) No one can create asset data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /assets/{assetId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to maintenance task documents.
     * @path /maintenanceTasks/{taskId}
     * @allow (get) Any user can read maintenance task data.
     * @deny (create) No one can create maintenance task data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /maintenanceTasks/{taskId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to general ledger documents.
     * @path /generalLedger/{entryId}
     * @allow (get) Any user can read general ledger data.
     * @deny (create) No one can create general ledger data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /generalLedger/{entryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to invoice documents.
     * @path /invoices/{invoiceId}
     * @allow (get) Any user can read invoice data.
     * @deny (create) No one can create invoice data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /invoices/{invoiceId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to bill documents.
     * @path /bills/{billId}
     * @allow (get) Any user can read bill data.
     * @deny (create) No one can create bill data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /bills/{billId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to bank account documents.
     * @path /bankAccounts/{accountId}
     * @allow (get) Any user can read bank account data.
     * @deny (create) No one can create bank account data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /bankAccounts/{accountId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read and write access to payrollRuns collection to users with 'Super Admin', 'Admin', or 'Manager' roles.
     * @path /payrollRuns/{runId}
     * @allow (read) Users with 'Super Admin', 'Admin', or 'Manager' roles.
     * @allow (write) Users with 'Super Admin', 'Admin', or 'Manager' roles.
     * @deny (create) Other users.
     * @principle Role-based access control.
     */
    match /payrollRuns/{runId} {
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
      }
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Allows read and write access to employeeSalaries collection to users with 'Super Admin', 'Admin', or 'Manager' roles.
     * @path /employeeSalaries/{userId}
     * @allow (read) Users with 'Super Admin', 'Admin', or 'Manager' roles.
     * @allow (write) Users with 'Super Admin', 'Admin', or 'Manager' roles.
     * @deny (create) Other users.
     * @principle Role-based access control.
     */
    match /employeeSalaries/{userId} {
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
      }
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Allows read access to payslips to the owner and users with 'Super Admin', 'Admin', or 'Manager' roles.
     * Allows write access to payslips to users with 'Super Admin', 'Admin', or 'Manager' roles.
     * @path /payslips/{payslipId}
     * @allow (read) Owner or users with 'Super Admin', 'Admin', or 'Manager' roles.
     * @allow (write) Users with 'Super Admin', 'Admin', or 'Manager' roles.
     * @deny (create) Other users.
     * @principle Role-based and ownership-based access control.
     */
    match /payslips/{payslipId} {
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get, list: if isOwner(resource.data.userId) || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows read and write access to performanceReviews collection to users with 'Super Admin', 'Admin', or 'Manager' roles.
     * @path /performanceReviews/{reviewId}
     * @allow (read) Users with 'Super Admin', 'Admin', or 'Manager' roles.
     * @allow (write) Users with 'Super Admin', 'Admin', or 'Manager' roles.
     * @deny (create) Other users.
     * @principle Role-based access control.
     */
    match /performanceReviews/{reviewId} {
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
      }
      allow get, list, create, update, delete: if isAdmin();
    }

     /**
     * @description Allows read and write access to employeeObjectives collection to users with 'Super Admin', 'Admin', or 'Manager' roles.
     * @path /employeeObjectives/{objectiveId}
     * @allow (read) Users with 'Super Admin', 'Admin', or 'Manager' roles.
     * @allow (write) Users with 'Super Admin', 'Admin', or 'Manager' roles.
     * @deny (create) Other users.
     * @principle Role-based access control.
     */
    match /employeeObjectives/{objectiveId} {
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
      }
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Allows read and write access to attendanceRecords collection to users with 'Super Admin', 'Admin', or 'Manager' roles.
     * @path /attendanceRecords/{recordId}
     * @allow (read) Users with 'Super Admin', 'Admin', or 'Manager' roles.
     * @allow (write) Users with 'Super Admin', 'Admin', or 'Manager' roles.
     * @deny (create) Other users.
     * @principle Role-based access control.
     */
    match /attendanceRecords/{recordId} {
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
      }
      allow get, list, create, update, delete: if isAdmin();
    }
     /**
     * @description Allows public read access to produksi documents.
     * @path /produksi/{produksiId}
     * @allow (get) Any user can read produksi data.
     * @deny (create) No one can create produksi data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /produksi/{produksiId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to geologi documents.
     * @path /geologi/{geologiId}
     * @allow (get) Any user can read geologi data.
     * @deny (create) No one can create geologi data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /geologi/{geologiId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to pengolahan documents.
     * @path /pengolahan/{pengolahanId}
     * @allow (get) Any user can read pengolahan data.
     * @deny (create) No one can create pengolahan data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /pengolahan/{pengolahanId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to k3l documents.
     * @path /k3l/{k3lId}
     * @allow (get) Any user can read k3l data.
     * @deny (create) No one can create k3l data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /k3l/{k3lId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to keuangan documents.
     * @path /keuangan/{keuanganId}
     * @allow (get) Any user can read keuangan data.
     * @deny (create) No one can create keuangan data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /keuangan/{keuanganId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to sdm documents.
     * @path /sdm/{sdmId}
     * @allow (get) Any user can read sdm data.
     * @deny (create) No one can create sdm data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /sdm/{sdmId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to it documents.
     * @path /it/{itId}
     * @allow (get) Any user can read it data.
     * @deny (create) No one can create it data.
     * @principle Allows public read access with no write access (prototype)
     */
    match /it/{itId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
        return request.auth != null;
    }
  }
}