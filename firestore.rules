/**
 * @fileoverview Firestore Security Rules for MineVision application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of ownership-based and role-based access control.
 * Users have ownership over their own user documents, while administrative roles
 * grant broader access to certain collections like payroll and performance data.
 * Collections intended for public consumption (e.g., KPIs, Announcements) are
 * readable by all, but writable only by authorized users (if applicable).
 *
 * Data Structure:
 * - /users/{userId}: Stores user account information, accessible to the user themselves.
 * - Top-level collections for each department (e.g., /produksi, /geologi)
 * - Top-level collections for dashboard data (e.g., /kpi, /announcements)
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed by not granting list permission on /users.
 * - Read-only collections (department data) are readable by all.
 * - Role-based access is implemented for sensitive data like payroll and performance reviews, granting broader access to 'Super Admin', 'Admin', and 'Manager' roles.
 *
 * Denormalization for Authorization:
 *  -  The rules for `payslips` use the `userId` field denormalized onto each payslip document to determine ownership. This avoids costly `get()` operations to the `users` collection.
 *  - Rules for `payrollRuns`, `employeeSalaries`, `performanceReviews`, `employeeObjectives`, and `attendanceRecords` use role-based access, checking the user's department (role) against the list of allowed departments. This avoids needing to duplicate role data in each of these collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user document.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user's auth UID matches the userId.
     * @deny (get, create, update, delete) if the user's auth UID does not match the userId.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read KPIs. Restrict writes.
     * @path /kpi/{kpiId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /kpi/{kpiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read Announcements. Restrict writes.
     * @path /announcements/{announcementId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read ProductionStatus. Restrict writes.
     * @path /productionStatus/{statusId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /productionStatus/{statusId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read PaymentRequests. Restrict writes.
     * @path /paymentRequests/{requestId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /paymentRequests/{requestId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read Budgets. Restrict writes.
     * @path /budgets/{budgetId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /budgets/{budgetId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read LeaveRequests. Restrict writes.
     * @path /leaveRequests/{requestId}
     * @allow (get, list) any authenticated user.
     * @deny (create, update, delete) all users.
     */
    match /leaveRequests/{requestId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read UserPermissions. Restrict writes.
     * @path /userPermissions/{userId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /userPermissions/{userId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read HelpdeskTickets. Restrict writes.
     * @path /helpdeskTickets/{ticketId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /helpdeskTickets/{ticketId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read Incidents. Restrict writes.
     * @path /incidents/{incidentId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /incidents/{incidentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read Inventory. Restrict writes.
     * @path /inventory/{itemId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /inventory/{itemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read PurchaseRequestsSC. Restrict writes.
     * @path /purchaseRequestsSC/{prId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /purchaseRequestsSC/{prId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read Shipments. Restrict writes.
     * @path /shipments/{shipmentId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /shipments/{shipmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read Assets. Restrict writes.
     * @path /assets/{assetId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /assets/{assetId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read MaintenanceTasks. Restrict writes.
     * @path /maintenanceTasks/{taskId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /maintenanceTasks/{taskId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read GeneralLedger. Restrict writes.
     * @path /generalLedger/{entryId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /generalLedger/{entryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read Invoices. Restrict writes.
     * @path /invoices/{invoiceId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /invoices/{invoiceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read Bills. Restrict writes.
     * @path /bills/{billId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /bills/{billId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read BankAccounts. Restrict writes.
     * @path /bankAccounts/{accountId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /bankAccounts/{accountId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read and write access to PayrollRuns for Super Admin, Admin, and Manager roles.
     * @path /payrollRuns/{runId}
     * @allow (get, list, create, update, delete) if the user's department is Super Admin, Admin, or Manager.
     * @deny (get, list, create, update, delete) if the user's department is not Super Admin, Admin, or Manager.
     * @principle Role-based access control for sensitive data.
     */
    match /payrollRuns/{runId} {
      allow get: if isSignedIn() && hasAdminRole();
      allow list: if isSignedIn() && hasAdminRole();
      allow create: if isSignedIn() && hasAdminRole();
      allow update: if isSignedIn() && hasAdminRole() && resource != null;
      allow delete: if isSignedIn() && hasAdminRole() && resource != null;
    }

    /**
     * @description Allows read and write access to EmployeeSalaries for Super Admin, Admin, and Manager roles.
     * @path /employeeSalaries/{userId}
     * @allow (get, list, create, update, delete) if the user's department is Super Admin, Admin, or Manager.
     * @deny (get, list, create, update, delete) if the user's department is not Super Admin, Admin, or Manager.
     * @principle Role-based access control for sensitive data.
     */
    match /employeeSalaries/{userId} {
      allow get: if isSignedIn() && hasAdminRole();
      allow list: if isSignedIn() && hasAdminRole();
      allow create: if isSignedIn() && hasAdminRole();
      allow update: if isSignedIn() && hasAdminRole() && resource != null;
      allow delete: if isSignedIn() && hasAdminRole() && resource != null;
    }

    /**
     * @description Allows read access to Payslips for the owner or Super Admin, Admin, and Manager roles.
     * @path /payslips/{payslipId}
     * @allow (get, list) if the user is the owner (userId matches) or the user's department is Super Admin, Admin, or Manager.
     * @deny (get, list) if the user is not the owner and the user's department is not Super Admin, Admin, or Manager.
     * @principle Ownership-based and role-based access control for sensitive data.
     */
    match /payslips/{payslipId} {
      allow get: if isSignedIn() && (isOwner(resource.data.userId) || hasAdminRole());
      allow list: if isSignedIn() && hasAdminRole();
      allow create, update, delete: if false; // Payslips should only be created by backend logic, not directly by users.
    }

    /**
     * @description Allows read and write access to PerformanceReviews for Super Admin, Admin, and Manager roles.
     * @path /performanceReviews/{reviewId}
     * @allow (get, list, create, update, delete) if the user's department is Super Admin, Admin, or Manager.
     * @deny (get, list, create, update, delete) if the user's department is not Super Admin, Admin, or Manager.
     * @principle Role-based access control for sensitive data.
     */
    match /performanceReviews/{reviewId} {
      allow get: if isSignedIn() && hasAdminRole();
      allow list: if isSignedIn() && hasAdminRole();
      allow create: if isSignedIn() && hasAdminRole();
      allow update: if isSignedIn() && hasAdminRole() && resource != null;
      allow delete: if isSignedIn() && hasAdminRole() && resource != null;
    }

    /**
     * @description Allows read and write access to EmployeeObjectives for Super Admin, Admin, and Manager roles.
     * @path /employeeObjectives/{objectiveId}
     * @allow (get, list, create, update, delete) if the user's department is Super Admin, Admin, or Manager.
     * @deny (get, list, create, update, delete) if the user's department is not Super Admin, Admin, or Manager.
     * @principle Role-based access control for sensitive data.
     */
    match /employeeObjectives/{objectiveId} {
      allow get: if isSignedIn() && hasAdminRole();
      allow list: if isSignedIn() && hasAdminRole();
      allow create: if isSignedIn() && hasAdminRole();
      allow update: if isSignedIn() && hasAdminRole() && resource != null;
      allow delete: if isSignedIn() && hasAdminRole() && resource != null;
    }

    /**
     * @description Allows read and write access to AttendanceRecords for Super Admin, Admin, and Manager roles.
     * @path /attendanceRecords/{recordId}
     * @allow (get, list, create, update, delete) if the user's department is Super Admin, Admin, or Manager.
     * @deny (get, list, create, update, delete) if the user's department is not Super Admin, Admin, or Manager.
     * @principle Role-based access control for sensitive data.
     */
    match /attendanceRecords/{recordId} {
      allow get: if isSignedIn() && hasAdminRole();
      allow list: if isSignedIn() && hasAdminRole();
      allow create: if isSignedIn() && hasAdminRole();
      allow update: if isSignedIn() && hasAdminRole() && resource != null;
      allow delete: if isSignedIn() && hasAdminRole() && resource != null;
    }

    /**
     * @description Allows anyone to read Produksi. Restrict writes.
     * @path /produksi/{produksiId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /produksi/{produksiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read Geologi. Restrict writes.
     * @path /geologi/{geologiId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /geologi/{geologiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read Pengolahan. Restrict writes.
     * @path /pengolahan/{pengolahanId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /pengolahan/{pengolahanId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read K3L. Restrict writes.
     * @path /k3l/{k3lId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /k3l/{k3lId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read Keuangan. Restrict writes.
     * @path /keuangan/{keuanganId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /keuangan/{keuanganId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read SDM. Restrict writes.
     * @path /sdm/{sdmId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /sdm/{sdmId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read IT. Restrict writes.
     * @path /it/{itId}
     * @allow (get, list) any unauthenticated user.
     * @deny (create, update, delete) all users.
     * @principle Public read, restricted write.
     */
    match /it/{itId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    //------------------- Helper functions -------------------

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

      /**
       * @description Checks if the authenticated user has an admin role (Super Admin, Admin, or Manager).
       * @returns {bool} True if the user has an admin role, false otherwise.
       */
    function hasAdminRole() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
    }
  }
}