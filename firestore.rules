/**
 * @fileoverview Firestore Security Rules for MineVision application.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model. User data is protected by strict ownership.
 * Most data collections follow a public-read, owner-write model.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profiles.  Write access is limited to the user themselves (ownership).
 * - Top-Level Collections (e.g., `/kpi`, `/announcements`): These collections are designed for public
 *   read access to support the main dashboard.  Write access is restricted to authenticated users
 *   and requires that the document contain an ownership field.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent unauthorized access to user data.
 * - Public read access is granted to dashboard-related collections to allow for data aggregation
 *   and display without requiring authentication.
 * - All write operations are explicitly validated to ensure data integrity and prevent unauthorized modifications.
 * - The rules do NOT currently enforce schema validation, focusing primarily on authorization.
 *   Data validation should be implemented in the application code during this prototyping phase.
 *
 * Denormalization for Authorization:
 * - Many collections rely on an implicit "ownership" model where the document's ID acts as the owner.
 *   For example, `/users/{userId}` documents are considered owned by the user with the matching `userId`.
 *
 * Structural Segregation:
 * - The application uses top-level collections for each department, such as `produksi`, `geologi`, etc.
 *   This segregation simplifies the rules and improves performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user owns the existing document at the current path.
     * @param {string} userId - The expected owner's user ID.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces ownership for documents under /users/{userId}.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile document.
     * @allow (get, list) User with UID 'user123' can read their own profile document.
     * @allow (update, delete) User with UID 'user123' can update or delete their own profile document.
     * @deny (create) User with UID 'user123' cannot create a profile document for user 'user456'.
     * @deny (get, list) User with UID 'user123' cannot read the profile document of user 'user456'.
     * @deny (update, delete) User with UID 'user123' cannot update or delete the profile document of user 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted

      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read and owner-only write access for KPIs.
     * @path /kpi/{kpiId}
     * @allow (get, list) Any user can read KPI data.
     * @allow (create) Authenticated user can create a KPI document if they "own" it.
     * @allow (update, delete) Authenticated user can update or delete a KPI document if they are the owner.
     * @deny (create) Non-authenticated user cannot create a KPI document.
     * @deny (update, delete) Non-authenticated user cannot update or delete a KPI document.
     * @principle Public read, owner-only write.
     */
    match /kpi/{kpiId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read and owner-only write access for announcements.
     * @path /announcements/{announcementId}
     * @allow (get, list) Any user can read announcement data.
     * @allow (create) Authenticated user can create an announcement document if they "own" it.
     * @allow (update, delete) Authenticated user can update or delete an announcement document if they are the owner.
     * @deny (create) Non-authenticated user cannot create an announcement document.
     * @deny (update, delete) Non-authenticated user cannot update or delete an announcement document.
     * @principle Public read, owner-only write.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read and owner-only write access for production status data.
     * @path /productionStatus/{statusId}
     * @allow (get, list) Any user can read production status data.
     * @allow (create) Authenticated user can create a production status document if they "own" it.
     * @allow (update, delete) Authenticated user can update or delete a production status document if they are the owner.
     * @deny (create) Non-authenticated user cannot create a production status document.
     * @deny (update, delete) Non-authenticated user cannot update or delete a production status document.
     * @principle Public read, owner-only write.
     */
    match /productionStatus/{statusId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read and owner-only write access for payment requests.
     * @path /paymentRequests/{requestId}
     * @allow (get, list) Any user can read payment request data.
     * @allow (create) Authenticated user can create a payment request document if they "own" it.
     * @allow (update, delete) Authenticated user can update or delete a payment request document if they are the owner.
     * @deny (create) Non-authenticated user cannot create a payment request document.
     * @deny (update, delete) Non-authenticated user cannot update or delete a payment request document.
     */
    match /paymentRequests/{requestId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read and owner-only write access for budget data.
     * @path /budgets/{budgetId}
     * @allow (get, list) Any user can read budget data.
     * @allow (create) Authenticated user can create a budget document if they "own" it.
     * @allow (update, delete) Authenticated user can update or delete a budget document if they are the owner.
     * @deny (create) Non-authenticated user cannot create a budget document.
     * @deny (update, delete) Non-authenticated user cannot update or delete a budget document.
     */
    match /budgets/{budgetId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read and owner-only write access for leave requests.
     * @path /leaveRequests/{requestId}
     * @allow (get, list) Any user can read leave request data.
     * @allow (create) Authenticated user can create a leave request document if they "own" it.
     * @allow (update, delete) Authenticated user can update or delete a leave request document if they are the owner.
     * @deny (create) Non-authenticated user cannot create a leave request document.
     * @deny (update, delete) Non-authenticated user cannot update or delete a leave request document.
     */
    match /leaveRequests/{requestId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Enforces ownership for documents under /userPermissions/{userId}.
     * @path /userPermissions/{userId}
     */
    match /userPermissions/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read and owner-only write access for helpdesk tickets.
     * @path /helpdeskTickets/{ticketId}
     */
    match /helpdeskTickets/{ticketId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read and owner-only write access for IT Assets.
     * @path /itAssets/{assetId}
     */
    match /itAssets/{assetId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

     /**
      * @description Allows public read and owner-only write access for network services.
      * @path /networkServices/{serviceId}
      */
    match /networkServices/{serviceId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read and owner-only write access for incidents.
     * @path /incidents/{incidentId}
     */
    match /incidents/{incidentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read and owner-only write access for inventory.
     * @path /inventory/{itemId}
     */
    match /inventory/{itemId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read and owner-only write access for purchase requests.
     * @path /purchaseRequestsSC/{prId}
     */
    match /purchaseRequestsSC/{prId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read and owner-only write access for shipments.
     * @path /shipments/{shipmentId}
     */
    match /shipments/{shipmentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read and owner-only write access for assets.
     * @path /assets/{assetId}
     */
    match /assets/{assetId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read and owner-only write access for maintenance tasks.
     * @path /maintenanceTasks/{taskId}
     */
    match /maintenanceTasks/{taskId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read and owner-only write access for general ledger entries.
     * @path /generalLedger/{entryId}
     */
    match /generalLedger/{entryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read and owner-only write access for invoices.
     * @path /invoices/{invoiceId}
     */
    match /invoices/{invoiceId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read and owner-only write access for bills.
     * @path /bills/{billId}
     */
    match /bills/{billId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read and owner-only write access for bank accounts.
     * @path /bankAccounts/{accountId}
     */
    match /bankAccounts/{accountId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

     /**
      * @description Allows public read and owner-only write access for payroll runs.
      * @path /payrollRuns/{runId}
      */
    match /payrollRuns/{runId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Enforces ownership for documents under /employeeSalaries/{userId}.
     * @path /employeeSalaries/{userId}
     */
    match /employeeSalaries/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read and owner-only write access for payslips.
     * @path /payslips/{payslipId}
     */
    match /payslips/{payslipId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read and owner-only write access for performance reviews.
     * @path /performanceReviews/{reviewId}
     */
    match /performanceReviews/{reviewId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read and owner-only write access for employee objectives.
     * @path /employeeObjectives/{objectiveId}
     */
    match /employeeObjectives/{objectiveId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read and owner-only write access for attendance records.
     * @path /attendanceRecords/{recordId}
     */
    match /attendanceRecords/{recordId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read-only access for produksi data.
     * @path /produksi/{produksiId}
     */
    match /produksi/{produksiId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows public read-only access for geologi data.
     * @path /geologi/{geologiId}
     */
    match /geologi/{geologiId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows public read-only access for pengolahan data.
     * @path /pengolahan/{pengolahanId}
     */
    match /pengolahan/{pengolahanId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows public read-only access for k3l data.
     * @path /k3l/{k3lId}
     */
    match /k3l/{k3lId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows public read-only access for keuangan data.
     * @path /keuangan/{keuanganId}
     */
    match /keuangan/{keuanganId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows public read-only access for sdm data.
     * @path /sdm/{sdmId}
     */
    match /sdm/{sdmId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows public read-only access for it data.
     * @path /it/{itId}
     */
    match /it/{itId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }
  }
}