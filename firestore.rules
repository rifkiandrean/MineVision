/**
 * @fileoverview Firestore Security Rules for MineVision application.
 *
 * Core Philosophy:
 * This ruleset enforces a mixed security model. User data is protected by owner-only access.
 * Department data is publicly readable, reflecting the application's read-only nature for those collections.
 * Payment and Leave requests are open for all authenticated users. KPI, Announcement, ProductionStatus, Budgets, and UserPermissions collections are open for all authenticated users as well.
 *
 * Data Structure:
 * - /users/{userId}: Stores user account information.
 * - /kpi/{kpiId}: Stores KPI data.
 * - /announcements/{announcementId}: Stores announcement data.
 * - /productionStatus/{statusId}: Stores production status data.
 * - /paymentRequests/{requestId}: Stores payment requests.
 * - /budgets/{budgetId}: Stores budget data.
 * - /leaveRequests/{leaveRequestId}: Stores leave requests.
 * - /userPermissions/{userId}: Stores user permissions.
 * - /produksi/{produksiId}: Stores produksi department data.
 * - /geologi/{geologiId}: Stores geologi department data.
 * - /pengolahan/{pengolahanId}: Stores pengolahan department data.
 * - /k3l/{k3lId}: Stores K3L department data.
 * - /keuangan/{keuanganId}: Stores keuangan department data.
 * - /sdm/{sdmId}: Stores SDM department data.
 * - /it/{itId}: Stores IT department data.
 *
 * Key Security Decisions:
 * - User listing is not allowed.
 * - Department data collections are publicly readable.
 * - Ambiguous relationships default to the most secure interpretation (owner-only).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user documents based on ownership.
     * @path /users/{userId}
     * @allow (create) User with uid 'user123' can create their own document with matching userId.
     * @deny (create) User with uid 'user456' cannot create a document with userId 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to KPI documents.
     * @path /kpi/{kpiId}
     * @allow (get, list) Any user can read KPI data.
     * @deny (create, update, delete) Only authenticated users can create, update or delete KPI data.
     * @principle Grants public read access while restricting write access to authenticated users.
     */
    match /kpi/{kpiId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to Announcement documents.
     * @path /announcements/{announcementId}
     * @allow (get, list) Any user can read announcement data.
     * @deny (create, update, delete) Only authenticated users can create, update or delete announcement data.
     * @principle Grants public read access while restricting write access to authenticated users.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to ProductionStatus documents.
     * @path /productionStatus/{statusId}
     * @allow (get, list) Any user can read production status data.
     * @deny (create, update, delete) Only authenticated users can create, update or delete production status data.
     * @principle Grants public read access while restricting write access to authenticated users.
     */
    match /productionStatus/{statusId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows all authenticated users to manage payment requests.
     * @path /paymentRequests/{requestId}
     * @allow (get, list, create, update, delete) Authenticated users can manage payment requests.
     * @deny (none) There are no specific restrictions for authenticated users.
     * @principle Allows full access to payment requests for authenticated users.
     */
    match /paymentRequests/{requestId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows all authenticated users to manage budget data.
     * @path /budgets/{budgetId}
     * @allow (get, list, create, update, delete) Authenticated users can manage budget data.
     * @deny (none) There are no specific restrictions for authenticated users.
     * @principle Allows full access to budget data for authenticated users.
     */
    match /budgets/{budgetId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows all authenticated users to manage leave requests.
     * @path /leaveRequests/{requestId}
     * @allow (get, list, create, update, delete) Authenticated users can manage leave requests.
     * @deny (none) There are no specific restrictions for authenticated users.
     * @principle Allows full access to leave requests for authenticated users.
     */
    match /leaveRequests/{leaveRequestId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows access to user permissions documents based on ownership.
     * @path /userPermissions/{userId}
     * @allow (create) User with uid 'user123' can create their own document with matching userId.
     * @deny (create) User with uid 'user456' cannot create a document with userId 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /userPermissions/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to Produksi documents.
     * @path /produksi/{produksiId}
     * @allow (get, list) Any user can read produksi data.
     * @deny (create, update, delete) No one can create, update, or delete produksi data.
     * @principle Grants public read access while restricting write access.
     */
    match /produksi/{produksiId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to Geologi documents.
     * @path /geologi/{geologiId}
     * @allow (get, list) Any user can read geologi data.
     * @deny (create, update, delete) No one can create, update, or delete geologi data.
     * @principle Grants public read access while restricting write access.
     */
    match /geologi/{geologiId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to Pengolahan documents.
     * @path /pengolahan/{pengolahanId}
     * @allow (get, list) Any user can read pengolahan data.
     * @deny (create, update, delete) No one can create, update, or delete pengolahan data.
     * @principle Grants public read access while restricting write access.
     */
    match /pengolahan/{pengolahanId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to K3L documents.
     * @path /k3l/{k3lId}
     * @allow (get, list) Any user can read K3L data.
     * @deny (create, update, delete) No one can create, update, or delete K3L data.
     * @principle Grants public read access while restricting write access.
     */
    match /k3l/{k3lId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to Keuangan documents.
     * @path /keuangan/{keuanganId}
     * @allow (get, list) Any user can read keuangan data.
     * @deny (create, update, delete) No one can create, update, or delete keuangan data.
     * @principle Grants public read access while restricting write access.
     */
    match /keuangan/{keuanganId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to SDM documents.
     * @path /sdm/{sdmId}
     * @allow (get, list) Any user can read SDM data.
     * @deny (create, update, delete) No one can create, update, or delete SDM data.
     * @principle Grants public read access while restricting write access.
     */
    match /sdm/{sdmId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to IT documents.
     * @path /it/{itId}
     * @allow (get, list) Any user can read IT data.
     * @deny (create, update, delete) No one can create, update, or delete IT data.
     * @principle Grants public read access while restricting write access.
     */
    match /it/{itId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}