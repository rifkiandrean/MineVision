/**
 * @fileoverview Firestore Security Rules for MineVision application.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model, combining user-ownership for certain collections (like `/users/{userId}`) with public read access for collections intended for broad consumption (like KPI, Announcements, and Production Status). It also includes some role-based access control for collections related to payroll, performance reviews, and attendance records.
 *
 * Data Structure:
 * The data is organized into top-level collections, primarily segregated by department (e.g., `produksi`, `geologi`, `keuangan`). A `users` collection stores user profiles, and other collections support cross-departmental functionality.
 *
 * Key Security Decisions:
 * - Users can only read their own user document.
 * - Data for the main dashboard (KPIs, announcements, production status) is publicly readable.
 * - Collections associated with payroll and HR are protected by role-based access, allowing only certain departments to read/write.
 * - Data validation is relaxed to allow for rapid prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read their own user document.
     * @path /users/{userId}
     * @allow (get, list) if request.auth != null
     * @deny (create, update, delete) Always deny.
     * @principle Enforces user-level access control.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read KPI documents.
     * @path /kpi/{kpiId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the kpi collection.
     */
    match /kpi/{kpiId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read announcement documents.
     * @path /announcements/{announcementId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the announcements collection.
     */
    match /announcements/{announcementId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read production status documents.
     * @path /productionStatus/{statusId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the production status collection.
     */
    match /productionStatus/{statusId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read payment request documents.
     * @path /paymentRequests/{requestId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the payment requests collection.
     */
    match /paymentRequests/{requestId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read budget documents.
     * @path /budgets/{budgetId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the budget collection.
     */
    match /budgets/{budgetId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows signed-in users to read leave request documents.
     * @path /leaveRequests/{requestId}
     * @allow (get, list) if request.auth != null
     * @deny (create, update, delete) Always deny.
     * @principle Requires authentication to access leave requests.
     */
    match /leaveRequests/{requestId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read user permissions documents.
     * @path /userPermissions/{userId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the user permissions collection.
     */
    match /userPermissions/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read helpdesk ticket documents.
     * @path /helpdeskTickets/{ticketId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the helpdesk tickets collection.
     */
    match /helpdeskTickets/{ticketId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read incident documents.
     * @path /incidents/{incidentId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the incidents collection.
     */
    match /incidents/{incidentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read inventory documents.
     * @path /inventory/{itemId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the inventory collection.
     */
    match /inventory/{itemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read purchase request documents.
     * @path /purchaseRequestsSC/{prId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the purchase requests collection.
     */
    match /purchaseRequestsSC/{prId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read shipment documents.
     * @path /shipments/{shipmentId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the shipments collection.
     */
    match /shipments/{shipmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read asset documents.
     * @path /assets/{assetId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the assets collection.
     */
    match /assets/{assetId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read maintenance task documents.
     * @path /maintenanceTasks/{taskId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the maintenance tasks collection.
     */
    match /maintenanceTasks/{taskId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read general ledger entry documents.
     * @path /generalLedger/{entryId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the general ledger entry collection.
     */
    match /generalLedger/{entryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read invoice documents.
     * @path /invoices/{invoiceId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the invoice collection.
     */
    match /invoices/{invoiceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read bill documents.
     * @path /bills/{billId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the bill collection.
     */
    match /bills/{billId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read bank account documents.
     * @path /bankAccounts/{accountId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the bank account collection.
     */
    match /bankAccounts/{accountId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows 'Super Admin', 'Admin', and 'Manager' roles to read and write payroll run documents.
     * @path /payrollRuns/{runId}
     * @allow (get, list, create, update, delete) if user's department is 'Super Admin', 'Admin', or 'Manager'.
     * @principle Enforces role-based access control.
     */
    match /payrollRuns/{runId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows 'Super Admin', 'Admin', and 'Manager' roles to read and write employee salary documents.
     * @path /employeeSalaries/{userId}
     * @allow (get, list, create, update, delete) if user's department is 'Super Admin', 'Admin', or 'Manager'.
     * @principle Enforces role-based access control.
     */
    match /employeeSalaries/{userId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows users to read their own payslips and 'Super Admin', 'Admin', and 'Manager' roles to read all payslips.
     * @path /payslips/{payslipId}
     * @allow (get, list) if request.auth.uid == resource.data.userId or user's department is 'Super Admin', 'Admin', or 'Manager'.
     * @deny (create, update, delete) Always deny.
     * @principle Enforces owner-based and role-based access control.
     */
    match /payslips/{payslipId} {
      allow get: if isOwner(resource.data.userId) || isAdmin();
      allow list: if isOwner(resource.data.userId) || isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows 'Super Admin', 'Admin', and 'Manager' roles to read and write performance review documents.
     * @path /performanceReviews/{reviewId}
     * @allow (get, list, create, update, delete) if user's department is 'Super Admin', 'Admin', or 'Manager'.
     * @principle Enforces role-based access control.
     */
    match /performanceReviews/{reviewId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows 'Super Admin', 'Admin', and 'Manager' roles to read and write employee objective documents.
     * @path /employeeObjectives/{objectiveId}
     * @allow (get, list, create, update, delete) if user's department is 'Super Admin', 'Admin', or 'Manager'.
     * @principle Enforces role-based access control.
     */
    match /employeeObjectives/{objectiveId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows 'Super Admin', 'Admin', and 'Manager' roles to read and write attendance record documents.
     * @path /attendanceRecords/{recordId}
     * @allow (get, list, create, update, delete) if user's department is 'Super Admin', 'Admin', or 'Manager'.
     * @principle Enforces role-based access control.
     */
    match /attendanceRecords/{recordId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows anyone to read Produksi documents.
     * @path /produksi/{produksiId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the produksi collection.
     */
    match /produksi/{produksiId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read Geologi documents.
     * @path /geologi/{geologiId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the geologi collection.
     */
    match /geologi/{geologiId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read Pengolahan documents.
     * @path /pengolahan/{pengolahanId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the pengolahan collection.
     */
    match /pengolahan/{pengolahanId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read K3L documents.
     * @path /k3l/{k3lId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the k3l collection.
     */
    match /k3l/{k3lId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read Keuangan documents.
     * @path /keuangan/{keuanganId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the keuangan collection.
     */
    match /keuangan/{keuanganId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read SDM documents.
     * @path /sdm/{sdmId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the sdm collection.
     */
    match /sdm/{sdmId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read IT documents.
     * @path /it/{itId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny.
     * @principle Allows public read access for the it collection.
     */
    match /it/{itId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }


    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
    }
  }
}