rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && request.auth.uid == resource.data.uid;
    }

    /**
     * @description Allows a user to read and write their own user document.
     * @path /users/{userId}
     * @allow (create) User with matching userId can create their own document.
     * @allow (get, update, delete) Signed-in user can access their own document.
     * @deny (create) User cannot create a document with a different userId.
     * @deny (get, update, delete) User cannot access another user's document.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get, update, delete: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow list: if false;
    }

    /**
     * @description Allows anyone to read KPI data, but only allows an owner to modify it.
     * @path /kpi/{kpiId}
     * @allow (get, list) Anyone can read KPI data.
     * @deny (create, update, delete) No write permissions are defined, add them after ownership field is defined.
     * @principle Public read access with owner-only writes.
     */
    match /kpi/{kpiId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.owner == request.auth.uid;
      allow update, delete: if isSignedIn() && request.resource.data.owner == request.auth.uid; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read announcement data, but only allows an owner to modify it.
     * @path /announcements/{announcementId}
     * @allow (get, list) Anyone can read announcement data.
     * @deny (create, update, delete) No write permissions are defined, add them after ownership field is defined.
     * @principle Public read access with owner-only writes.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.owner == request.auth.uid;
      allow update, delete: if isSignedIn() && request.resource.data.owner == request.auth.uid; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read production status data, but only allows an owner to modify it.
     * @path /productionStatus/{statusId}
     * @allow (get, list) Anyone can read production status data.
     * @deny (create, update, delete) No write permissions are defined, add them after ownership field is defined.
     * @principle Public read access with owner-only writes.
     */
    match /productionStatus/{statusId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.owner == request.auth.uid;
      allow update, delete: if isSignedIn() && request.resource.data.owner == request.auth.uid; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read payment request data, but only allows an owner to modify it.
     * @path /paymentRequests/{requestId}
     * @allow (get, list) Anyone can read payment request data.
     * @deny (create, update, delete) No write permissions are defined, add them after ownership field is defined.
     * @principle Public read access with owner-only writes.
     */
    match /paymentRequests/{requestId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.owner == request.auth.uid;
      allow update, delete: if isSignedIn() && request.resource.data.owner == request.auth.uid; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read budget data, but only allows an owner to modify it.
     * @path /budgets/{budgetId}
     * @allow (get, list) Anyone can read budget data.
     * @deny (create, update, delete) No write permissions are defined, add them after ownership field is defined.
     * @principle Public read access with owner-only writes.
     */
    match /budgets/{budgetId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.owner == request.auth.uid;
      allow update, delete: if isSignedIn() && request.resource.data.owner == request.auth.uid; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read leave request data, but only allows an owner to modify it.
     * @path /leaveRequests/{requestId}
     * @allow (get, list) Anyone can read leave request data.
     * @deny (create, update, delete) No write permissions are defined, add them after ownership field is defined.
     * @principle Public read access with owner-only writes.
     */
    match /leaveRequests/{requestId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.owner == request.auth.uid;
      allow update, delete: if isSignedIn() && request.resource.data.owner == request.auth.uid; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
    
    /**
     * @description Allows a user to read and write their own user permissions document.
     * @path /userPermissions/{userId}
     * @allow (create) User with matching userId can create their own document.
     * @allow (get, update, delete) Signed-in user can access their own document.
     * @deny (create) User cannot create a document with a different userId.
     * @deny (get, update, delete) User cannot access another user's document.
     */
    match /userPermissions/{userId} {
      allow get, update, delete: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow list: if false;
    }

    /**
     * @description Allows anyone to read produksi data.
     * @path /produksi/{produksiId}
     * @allow (get, list) Anyone can read produksi data.
     * @deny (create, update, delete) No write permissions are defined.
     * @principle Public read access.
     */
    match /produksi/{produksiId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.owner == request.auth.uid;
      allow update, delete: if isSignedIn() && request.resource.data.owner == request.auth.uid;
    }

    /**
     * @description Allows anyone to read geologi data.
     * @path /geologi/{geologiId}
     * @allow (get, list) Anyone can read geologi data.
     * @deny (create, update, delete) No write permissions are defined.
     * @principle Public read access.
     */
    match /geologi/{geologiId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.owner == request.auth.uid;
      allow update, delete: if isSignedIn() && request.resource.data.owner == request.auth.uid;
    }

    /**
     * @description Allows anyone to read pengolahan data.
     * @path /pengolahan/{pengolahanId}
     * @allow (get, list) Anyone can read pengolahan data.
     * @deny (create, update, delete) No write permissions are defined.
     * @principle Public read access.
     */
    match /pengolahan/{pengolahanId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.owner == request.auth.uid;
      allow update, delete: if isSignedIn() && request.resource.data.owner == request.auth.uid;
    }

    /**
     * @description Allows anyone to read K3L data.
     * @path /k3l/{k3lId}
     * @allow (get, list) Anyone can read K3L data.
     * @deny (create, update, delete) No write permissions are defined.
     * @principle Public read access.
     */
    match /k3l/{k3lId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.owner == request.auth.uid;
      allow update, delete: if isSignedIn() && request.resource.data.owner == request.auth.uid;
    }

    /**
     * @description Allows anyone to read keuangan data.
     * @path /keuangan/{keuanganId}
     * @allow (get, list) Anyone can read keuangan data.
     * @deny (create, update, delete) No write permissions are defined.
     * @principle Public read access.
     */
    match /keuangan/{keuanganId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.owner == request.auth.uid;
      allow update, delete: if isSignedIn() && request.resource.data.owner == request.auth.uid;
    }

    /**
     * @description Allows anyone to read SDM data.
     * @path /sdm/{sdmId}
     * @allow (get, list) Anyone can read SDM data.
     * @deny (create, update, delete) No write permissions are defined.
     * @principle Public read access.
     */
    match /sdm/{sdmId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.owner == request.auth.uid;
      allow update, delete: if isSignedIn() && request.resource.data.owner == request.auth.uid;
    }

    /**
     * @description Allows anyone to read IT data.
     * @path /it/{itId}
     * @allow (get, list) Anyone can read IT data.
     * @deny (create, update, delete) No write permissions are defined.
     * @principle Public read access.
     */
    match /it/{itId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.owner == request.auth.uid;
      allow update, delete: if isSignedIn() && request.resource.data.owner == request.auth.uid;
    }
  }
}