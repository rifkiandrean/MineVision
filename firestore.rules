rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user document.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own user document with matching UID.
     * @deny (create) - Unauthenticated user attempts to create a user document.
     * @allow (get) - Authenticated user reads their own user document.
     * @deny (get) - Authenticated user attempts to read another user's document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to KPI documents, but restricts writes.
     * @path /kpi/{kpiId}
     * @allow (get) - Any user can read a KPI document.
     * @deny (create) - Any user attempts to create a KPI document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /kpi/{kpiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to announcement documents, but restricts writes.
     * @path /announcements/{announcementId}
     * @allow (get) - Any user can read an announcement document.
     * @deny (create) - Any user attempts to create an announcement document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to production status documents, but restricts writes.
     * @path /productionStatus/{statusId}
     * @allow (get) - Any user can read a production status document.
     * @deny (create) - Any user attempts to create a production status document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /productionStatus/{statusId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to payment request documents, but restricts writes.
     * @path /paymentRequests/{requestId}
     * @allow (get) - Any user can read a payment request document.
     * @deny (create) - Any user attempts to create a payment request document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /paymentRequests/{requestId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to budget documents, but restricts writes.
     * @path /budgets/{budgetId}
     * @allow (get) - Any user can read a budget document.
     * @deny (create) - Any user attempts to create a budget document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /budgets/{budgetId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to leave request documents, but restricts writes.
     * @path /leaveRequests/{requestId}
     * @allow (get) - Any user can read a leave request document.
     * @deny (create) - Any user attempts to create a leave request document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /leaveRequests/{requestId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows users to read and write their own user permissions document.
     * @path /userPermissions/{userId}
     * @allow (create) - Authenticated user creates their own user permissions document with matching UID.
     * @deny (create) - Unauthenticated user attempts to create a user permissions document.
     * @allow (get) - Authenticated user reads their own user permissions document.
     * @deny (get) - Authenticated user attempts to read another user's user permissions document.
     * @principle Enforces document ownership for writes.
     */
    match /userPermissions/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to helpdesk ticket documents, but restricts writes.
     * @path /helpdeskTickets/{ticketId}
     * @allow (get) - Any user can read a helpdesk ticket document.
     * @deny (create) - Any user attempts to create a helpdesk ticket document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /helpdeskTickets/{ticketId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
      /**
     * @description Allows public read access to incident documents, but restricts writes.
     * @path /incidents/{incidentId}
     * @allow (get) - Any user can read an incident document.
     * @deny (create) - Any user attempts to create an incident document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /incidents/{incidentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    /**
     * @description Allows public read access to inventory item documents, but restricts writes.
     * @path /inventory/{itemId}
     * @allow (get) - Any user can read an inventory item document.
     * @deny (create) - Any user attempts to create an inventory item document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /inventory/{itemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
      /**
     * @description Allows public read access to purchase request documents, but restricts writes.
     * @path /purchaseRequestsSC/{prId}
     * @allow (get) - Any user can read a purchase request document.
     * @deny (create) - Any user attempts to create a purchase request document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /purchaseRequestsSC/{prId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    /**
     * @description Allows public read access to shipment documents, but restricts writes.
     * @path /shipments/{shipmentId}
     * @allow (get) - Any user can read a shipment document.
     * @deny (create) - Any user attempts to create a shipment document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /shipments/{shipmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    /**
     * @description Allows public read access to asset documents, but restricts writes.
     * @path /assets/{assetId}
     * @allow (get) - Any user can read an asset document.
     * @deny (create) - Any user attempts to create an asset document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /assets/{assetId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
     /**
     * @description Allows public read access to maintenance task documents, but restricts writes.
     * @path /maintenanceTasks/{taskId}
     * @allow (get) - Any user can read a maintenance task document.
     * @deny (create) - Any user attempts to create a maintenance task document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /maintenanceTasks/{taskId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
      /**
     * @description Allows public read access to general ledger entry documents, but restricts writes.
     * @path /generalLedger/{entryId}
     * @allow (get) - Any user can read a general ledger entry document.
     * @deny (create) - Any user attempts to create a general ledger entry document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /generalLedger/{entryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    /**
     * @description Allows public read access to invoice documents, but restricts writes.
     * @path /invoices/{invoiceId}
     * @allow (get) - Any user can read an invoice document.
     * @deny (create) - Any user attempts to create a invoice document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /invoices/{invoiceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    /**
     * @description Allows public read access to bill documents, but restricts writes.
     * @path /bills/{billId}
     * @allow (get) - Any user can read a bill document.
     * @deny (create) - Any user attempts to create a bill document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /bills/{billId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    /**
     * @description Allows public read access to bank account documents, but restricts writes.
     * @path /bankAccounts/{accountId}
     * @allow (get) - Any user can read a bank account document.
     * @deny (create) - Any user attempts to create a bank account document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /bankAccounts/{accountId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to produksi documents, but restricts writes.
     * @path /produksi/{produksiId}
     * @allow (get) - Any user can read a produksi document.
     * @deny (create) - Any user attempts to create a produksi document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /produksi/{produksiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to geologi documents, but restricts writes.
     * @path /geologi/{geologiId}
     * @allow (get) - Any user can read a geologi document.
     * @deny (create) - Any user attempts to create a geologi document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /geologi/{geologiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to pengolahan documents, but restricts writes.
     * @path /pengolahan/{pengolahanId}
     * @allow (get) - Any user can read a pengolahan document.
     * @deny (create) - Any user attempts to create a pengolahan document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /pengolahan/{pengolahanId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to k3l documents, but restricts writes.
     * @path /k3l/{k3lId}
     * @allow (get) - Any user can read a k3l document.
     * @deny (create) - Any user attempts to create a k3l document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /k3l/{k3lId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to keuangan documents, but restricts writes.
     * @path /keuangan/{keuanganId}
     * @allow (get) - Any user can read a keuangan document.
     * @deny (create) - Any user attempts to create a keuangan document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /keuangan/{keuanganId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to sdm documents, but restricts writes.
     * @path /sdm/{sdmId}
     * @allow (get) - Any user can read a sdm document.
     * @deny (create) - Any user attempts to create a sdm document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /sdm/{sdmId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to it documents, but restricts writes.
     * @path /it/{itId}
     * @allow (get) - Any user can read a it document.
     * @deny (create) - Any user attempts to create a it document.
     * @principle Public read access with owner-only writes (write is unavailable here, so it's `if false`).
     */
    match /it/{itId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}