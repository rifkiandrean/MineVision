/**
 * @fileOverview Firestore Security Rules for MineVision application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of ownership-based and role-based access control.
 * Users can generally only access their own data, while specific roles may have broader access.
 * Strict validation is applied to writes to ensure data integrity and prevent unauthorized modifications.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user data, accessible only to the user.
 * - Top-level collections (e.g., /kpi, /announcements, /incidents): Store application-wide data, potentially with public read access and restricted write access based on role or ownership.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - The `incidents` collection allows public read access but restricts write access.
 * - Read-only access for data in department collections (`produksi`, `geologi`, `pengolahan`, `k3l`, `keuangan`, `sdm`, `it`).
 * - All write operations require authentication and are subject to validation.
 *
 * Denormalization for Authorization:
 *   None.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the document.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user-specific data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own user document.
     * @allow (get) User with UID 'user123' can read their own user document.
     * @deny (create) User with UID 'user456' cannot create a user document for 'user123'.
     * @deny (update) User with UID 'user456' cannot update the user document for 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the user document for 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for KPI data.
     * @path /kpi/{kpiId}
     * @allow (get) Any signed-in user can read KPI data.
     * @deny (create) Only authenticated users can create KPI data.
     * @deny (update) Only authenticated users can update KPI data.
     * @deny (delete) Only authenticated users can delete KPI data.
     * @principle Restricts write access to authenticated users.
     */
    match /kpi/{kpiId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for announcements.
     * @path /announcements/{announcementId}
     * @allow (get) Any signed-in user can read announcements.
     * @deny (create) Only authenticated users can create announcements.
     * @deny (update) Only authenticated users can update announcements.
     * @deny (delete) Only authenticated users can delete announcements.
     * @principle Restricts write access to authenticated users.
     */
    match /announcements/{announcementId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for production status data.
     * @path /productionStatus/{statusId}
     * @allow (get) Any signed-in user can read production status data.
     * @deny (create) Only authenticated users can create production status data.
     * @deny (update) Only authenticated users can update production status data.
     * @deny (delete) Only authenticated users can delete production status data.
     * @principle Restricts write access to authenticated users.
     */
    match /productionStatus/{statusId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for payment requests.
     * @path /paymentRequests/{requestId}
     * @allow (get) Any signed-in user can read payment requests.
     * @deny (create) Only authenticated users can create payment requests.
     * @deny (update) Only authenticated users can update payment requests.
     * @deny (delete) Only authenticated users can delete payment requests.
     * @principle Restricts write access to authenticated users.
     */
    match /paymentRequests/{requestId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for budget data.
     * @path /budgets/{budgetId}
     * @allow (get) Any signed-in user can read budget data.
     * @deny (create) Only authenticated users can create budget data.
     * @deny (update) Only authenticated users can update budget data.
     * @deny (delete) Only authenticated users can delete budget data.
     * @principle Restricts write access to authenticated users.
     */
    match /budgets/{budgetId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for leave requests.
     * @path /leaveRequests/{requestId}
     * @allow (get) Any signed-in user can read leave requests.
     * @deny (create) Only authenticated users can create leave requests.
     * @deny (update) Only authenticated users can update leave requests.
     * @deny (delete) Only authenticated users can delete leave requests.
     * @principle Restricts write access to authenticated users.
     */
    match /leaveRequests/{requestId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for user permissions.
     * @path /userPermissions/{userId}
     * @allow (get) Any signed-in user can read user permissions.
     * @deny (create) Only authenticated users can create user permissions.
     * @deny (update) Only authenticated users can update user permissions.
     * @deny (delete) Only authenticated users can delete user permissions.
     * @principle Restricts write access to authenticated users.
     */
    match /userPermissions/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for helpdesk tickets.
     * @path /helpdeskTickets/{ticketId}
     * @allow (get) Any signed-in user can read helpdesk tickets.
     * @deny (create) Only authenticated users can create helpdesk tickets.
     * @deny (update) Only authenticated users can update helpdesk tickets.
     * @deny (delete) Only authenticated users can delete helpdesk tickets.
     * @principle Restricts write access to authenticated users.
     */
    match /helpdeskTickets/{ticketId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for K3L incidents.
     * @path /incidents/{incidentId}
     * @allow (get) Any signed-in user can read K3L incidents.
     * @deny (create) Only authenticated users can create K3L incidents.
     * @deny (update) Only authenticated users can update K3L incidents.
     * @deny (delete) Only authenticated users can delete K3L incidents.
     * @principle Restricts write access to authenticated users.
     */
    match /incidents/{incidentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for supply chain inventory items.
     * @path /inventory/{itemId}
     * @allow (get) Any signed-in user can read inventory items.
     * @deny (create) Only authenticated users can create inventory items.
     * @deny (update) Only authenticated users can update inventory items.
     * @deny (delete) Only authenticated users can delete inventory items.
     * @principle Restricts write access to authenticated users.
     */
    match /inventory/{itemId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for supply chain purchase requests.
     * @path /purchaseRequestsSC/{prId}
     * @allow (get) Any signed-in user can read purchase requests.
     * @deny (create) Only authenticated users can create purchase requests.
     * @deny (update) Only authenticated users can update purchase requests.
     * @deny (delete) Only authenticated users can delete purchase requests.
     * @principle Restricts write access to authenticated users.
     */
    match /purchaseRequestsSC/{prId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for shipments.
     * @path /shipments/{shipmentId}
     * @allow (get) Any signed-in user can read shipments.
     * @deny (create) Only authenticated users can create shipments.
     * @deny (update) Only authenticated users can update shipments.
     * @deny (delete) Only authenticated users can delete shipments.
     * @principle Restricts write access to authenticated users.
     */
    match /shipments/{shipmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for company assets.
     * @path /assets/{assetId}
     * @allow (get) Any signed-in user can read company assets.
     * @deny (create) Only authenticated users can create company assets.
     * @deny (update) Only authenticated users can update company assets.
     * @deny (delete) Only authenticated users can delete company assets.
     * @principle Restricts write access to authenticated users.
     */
    match /assets/{assetId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for maintenance tasks.
     * @path /maintenanceTasks/{taskId}
     * @allow (get) Any signed-in user can read maintenance tasks.
     * @deny (create) Only authenticated users can create maintenance tasks.
     * @deny (update) Only authenticated users can update maintenance tasks.
     * @deny (delete) Only authenticated users can delete maintenance tasks.
     * @principle Restricts write access to authenticated users.
     */
    match /maintenanceTasks/{taskId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for general ledger entries.
     * @path /generalLedger/{entryId}
     * @allow (get) Any signed-in user can read general ledger entries.
     * @deny (create) Only authenticated users can create general ledger entries.
     * @deny (update) Only authenticated users can update general ledger entries.
     * @deny (delete) Only authenticated users can delete general ledger entries.
     */
    match /generalLedger/{entryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for invoices.
     * @path /invoices/{invoiceId}
     * @allow (get) Any signed-in user can read invoices.
     * @deny (create) Only authenticated users can create invoices.
     * @deny (update) Only authenticated users can update invoices.
     * @deny (delete) Only authenticated users can delete invoices.
     */
    match /invoices/{invoiceId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for bills.
     * @path /bills/{billId}
     * @allow (get) Any signed-in user can read bills.
     * @deny (create) Only authenticated users can create bills.
     * @deny (update) Only authenticated users can update bills.
     * @deny (delete) Only authenticated users can delete bills.
     */
    match /bills/{billId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for bank accounts.
     * @path /bankAccounts/{accountId}
     * @allow (get) Any signed-in user can read bank accounts.
     * @deny (create) Only authenticated users can create bank accounts.
     * @deny (update) Only authenticated users can update bank accounts.
     * @deny (delete) Only authenticated users can delete bank accounts.
     */
    match /bankAccounts/{accountId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
    
    /**
     * @description Rules for produksi department data.
     * @path /produksi/{produksiId}
     * @allow (get) Anyone can read produksi data.
     * @deny (create) No one can create produksi data.
     * @deny (update) No one can update produksi data.
     * @deny (delete) No one can delete produksi data.
     * @principle Data is read-only and publicly accessible.
     */
    match /produksi/{produksiId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for geologi department data.
     * @path /geologi/{geologiId}
     * @allow (get) Anyone can read geologi data.
     * @deny (create) No one can create geologi data.
     * @deny (update) No one can update geologi data.
     * @deny (delete) No one can delete geologi data.
     * @principle Data is read-only and publicly accessible.
     */
    match /geologi/{geologiId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for pengolahan department data.
     * @path /pengolahan/{pengolahanId}
     * @allow (get) Anyone can read pengolahan data.
     * @deny (create) No one can create pengolahan data.
     * @deny (update) No one can update pengolahan data.
     * @deny (delete) No one can delete pengolahan data.
     * @principle Data is read-only and publicly accessible.
     */
    match /pengolahan/{pengolahanId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for K3L department data.
     * @path /k3l/{k3lId}
     * @allow (get) Anyone can read K3L data.
     * @deny (create) No one can create K3L data.
     * @deny (update) No one can update K3L data.
     * @deny (delete) No one can delete K3L data.
     * @principle Data is read-only and publicly accessible.
     */
    match /k3l/{k3lId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for keuangan department data.
     * @path /keuangan/{keuanganId}
     * @allow (get) Anyone can read keuangan data.
     * @deny (create) No one can create keuangan data.
     * @deny (update) No one can update keuangan data.
     * @deny (delete) No one can delete keuangan data.
     * @principle Data is read-only and publicly accessible.
     */
    match /keuangan/{keuanganId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for SDM department data.
     * @path /sdm/{sdmId}
     * @allow (get) Anyone can read SDM data.
     * @deny (create) No one can create SDM data.
     * @deny (update) No one can update SDM data.
     * @deny (delete) No one can delete SDM data.
     * @principle Data is read-only and publicly accessible.
     */
    match /sdm/{sdmId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for IT department data.
     * @path /it/{itId}
     * @allow (get) Anyone can read IT data.
     * @deny (create) No one can create IT data.
     * @deny (update) No one can update IT data.
     * @deny (delete) No one can delete IT data.
     * @principle Data is read-only and publicly accessible.
     */
    match /it/{itId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}