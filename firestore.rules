/**
 * @fileoverview Firestore Security Rules for MineVision application.
 *
 * Core Philosophy:
 * This ruleset provides basic read access to all documents, while restricting all write access.
 * This configuration is intended for prototyping and rapid development, where data validation is not critical
 * but authorization is enforced. More specific authorization rules can be added later.
 *
 * Data Structure:
 * The Firestore database is structured with top-level collections for each department:
 * `/produksi`, `/geologi`, `/pengolahan`, `/k3l`, `/keuangan`, `/sdm`, `/it`,
 * as well as collections for dashboard data: `/kpi`, `/announcements`, `/productionStatus`, `/paymentRequests`, and `/budgets`.
 *
 * Key Security Decisions:
 * - Read access is generally open to facilitate prototyping.
 * - Write access is denied across the board, ensuring that no unauthorized data modifications can occur.
 *
 * Specific notes:
 * - The original reasoning text specified that certain collections were read-only. While this is a valid approach,
 *   this initial ruleset takes a more conservative stance by explicitly denying all writes on every collection.
 *   This aligns with the "secure by default" principle.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the KPI collection.
     * @path /kpi/{kpiId}
     * @allow get, list: Anyone can read KPI data.
     * @deny create, update, delete: No one can create, update, or delete KPI data.
     * @principle Denies all writes for increased security during prototyping.
     */
    match /kpi/{kpiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures the announcements collection.
     * @path /announcements/{announcementId}
     * @allow get, list: Anyone can read announcement data.
     * @deny create, update, delete: No one can create, update, or delete announcement data.
     * @principle Denies all writes for increased security during prototyping.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures the productionStatus collection.
     * @path /productionStatus/{statusId}
     * @allow get, list: Anyone can read production status data.
     * @deny create, update, delete: No one can create, update, or delete production status data.
     * @principle Denies all writes for increased security during prototyping.
     */
    match /productionStatus/{statusId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures the paymentRequests collection.
     * @path /paymentRequests/{requestId}
     * @allow get, list: Anyone can read payment requests data.
     * @deny create, update, delete: No one can create, update, or delete payment requests data.
     * @principle Denies all writes for increased security during prototyping.
     */
    match /paymentRequests/{requestId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures the budgets collection.
     * @path /budgets/{budgetId}
     * @allow get, list: Anyone can read budget data.
     * @deny create, update, delete: No one can create, update, or delete budget data.
     * @principle Denies all writes for increased security during prototyping.
     */
    match /budgets/{budgetId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures the produksi collection.
     * @path /produksi/{produksiId}
     * @allow get, list: Anyone can read produksi data.
     * @deny create, update, delete: No one can create, update, or delete produksi data.
     * @principle Denies all writes for increased security during prototyping.
     */
    match /produksi/{produksiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures the geologi collection.
     * @path /geologi/{geologiId}
     * @allow get, list: Anyone can read geologi data.
     * @deny create, update, delete: No one can create, update, or delete geologi data.
     * @principle Denies all writes for increased security during prototyping.
     */
    match /geologi/{geologiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures the pengolahan collection.
     * @path /pengolahan/{pengolahanId}
     * @allow get, list: Anyone can read pengolahan data.
     * @deny create, update, delete: No one can create, update, or delete pengolahan data.
     * @principle Denies all writes for increased security during prototyping.
     */
    match /pengolahan/{pengolahanId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures the k3l collection.
     * @path /k3l/{k3lId}
     * @allow get, list: Anyone can read K3L data.
     * @deny create, update, delete: No one can create, update, or delete K3L data.
     * @principle Denies all writes for increased security during prototyping.
     */
    match /k3l/{k3lId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures the keuangan collection.
     * @path /keuangan/{keuanganId}
     * @allow get, list: Anyone can read keuangan data.
     * @deny create, update, delete: No one can create, update, or delete keuangan data.
     * @principle Denies all writes for increased security during prototyping.
     */
    match /keuangan/{keuanganId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures the sdm collection.
     * @path /sdm/{sdmId}
     * @allow get, list: Anyone can read SDM data.
     * @deny create, update, delete: No one can create, update, or delete SDM data.
     * @principle Denies all writes for increased security during prototyping.
     */
    match /sdm/{sdmId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures the it collection.
     * @path /it/{itId}
     * @allow get, list: Anyone can read IT data.
     * @deny create, update, delete: No one can create, update, or delete IT data.
     * @principle Denies all writes for increased security during prototyping.
     */
    match /it/{itId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}