/**
 * @fileoverview Firestore Security Rules for MineVision application.
 *
 * Core Philosophy:
 * This ruleset provides granular access control to different collections within the MineVision application.
 * Collections such as KPI, Announcements, Production Status, Payment Requests, Budgets, and Leave Requests require authentication for write operations but are publicly readable.
 * Department-specific collections ('produksi', 'geologi', 'pengolahan', 'k3l', 'keuangan', 'sdm', 'it') are publicly readable.
 *
 * Data Structure:
 * - Top-level collections for each department and dashboard components.
 *
 * Key Security Decisions:
 * - Public read access to department-specific data to facilitate the read-only nature of the application as described.
 * - Authentication is required for any data modification (create, update, delete) on certain collections to protect data integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access, but restricts write access to authenticated users.
     * @path /kpi/{kpiId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows authenticated users to manage KPI data for the main dashboard.
     */
    match /kpi/{kpiId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access, but restricts write access to authenticated users.
     * @path /announcements/{announcementId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows authenticated users to manage announcement data for the main dashboard.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access, but restricts write access to authenticated users.
     * @path /productionStatus/{statusId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows authenticated users to manage production status data for the main dashboard.
     */
    match /productionStatus/{statusId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access, but restricts write access to authenticated users.
     * @path /paymentRequests/{requestId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows authenticated users to manage payment requests.
     */
    match /paymentRequests/{requestId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access, but restricts write access to authenticated users.
     * @path /budgets/{budgetId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows authenticated users to manage budget data.
     */
    match /budgets/{budgetId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access, but restricts write access to authenticated users.
     * @path /leaveRequests/{requestId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows authenticated users to manage leave requests.
     */
    match /leaveRequests/{requestId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access.
     * @path /produksi/{produksiId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to produksi department data.
     */
    match /produksi/{produksiId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access.
     * @path /geologi/{geologiId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to geologi department data.
     */
    match /geologi/{geologiId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access.
     * @path /pengolahan/{pengolahanId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to pengolahan department data.
     */
    match /pengolahan/{pengolahanId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access.
     * @path /k3l/{k3lId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to K3L department data.
     */
    match /k3l/{k3lId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access.
     * @path /keuangan/{keuanganId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to keuangan department data.
     */
    match /keuangan/{keuanganId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access.
     * @path /sdm/{sdmId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to SDM department data.
     */
    match /sdm/{sdmId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access.
     * @path /it/{itId}
     * @allow get, list: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows public read access to IT department data.
     */
    match /it/{itId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

  }

  function isSignedIn() {
    return request.auth != null;
  }
}