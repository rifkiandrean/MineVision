/**
 * @fileoverview Firestore Security Rules for MineVision application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and read-only access for department data.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores individual user profiles. Access is restricted to the owning user.
 * - `/kpi/{kpiId}`, `/announcements/{announcementId}`, `/productionStatus/{statusId}`, `/paymentRequests/{requestId}`, `/budgets/{budgetId}`, `/leaveRequests/{requestId}`: Top-level collections for various data entities.
 * - `/userPermissions/{userId}`: Stores user-specific permissions. Access is restricted to the owning user.
 * - `/produksi/{produksiId}`, `/geologi/{geologiId}`, `/pengolahan/{pengolahanId}`, `/k3l/{k3lId}`, `/keuangan/{keuanganId}`, `/sdm/{sdmId}`, `/it/{itId}`: Top-level collections for department data. Read-only access for all authenticated users.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Department data collections (`produksi`, `geologi`, etc.) are read-only for all authenticated users.
 * - User profiles are strictly owned by the corresponding user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     *   request.auth.uid == 'user123'
     *   request.resource.data.uid == 'user123'
     * @allow (get, update, delete) User with UID 'user123' can access/modify their profile.
     *   request.auth.uid == 'user123'
     * @deny (create) User with UID 'user456' cannot create a profile for 'user123'.
     *   request.auth.uid == 'user456'
     *   request.resource.data.uid == 'user123'
     * @deny (get, update, delete) User with UID 'user456' cannot access/modify profile of 'user123'.
     *   request.auth.uid == 'user456'
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for KPI documents.
     * @path /kpi/{kpiId}
     * @allow (get, list) Any authenticated user can read KPI data.
     * @allow (create, update, delete) No one can create, update, or delete KPI data.
     * @deny (create, update, delete) No one can create, update, or delete KPI data.
     * @principle Restricts write access to KPI documents.
     */
    match /kpi/{kpiId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for announcement documents.
     * @path /announcements/{announcementId}
     * @allow (get, list) Any authenticated user can read announcement data.
     * @allow (create, update, delete) No one can create, update, or delete announcement data.
     * @deny (create, update, delete) No one can create, update, or delete announcement data.
     * @principle Restricts write access to announcement documents.
     */
    match /announcements/{announcementId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for production status documents.
     * @path /productionStatus/{statusId}
     * @allow (get, list) Any authenticated user can read production status data.
     * @allow (create, update, delete) No one can create, update, or delete production status data.
     * @deny (create, update, delete) No one can create, update, or delete production status data.
     * @principle Restricts write access to production status documents.
     */
    match /productionStatus/{statusId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for payment request documents.
     * @path /paymentRequests/{requestId}
     * @allow (get, list) Any authenticated user can read payment request data.
     * @allow (create, update, delete) No one can create, update, or delete payment request data.
     * @deny (create, update, delete) No one can create, update, or delete payment request data.
     * @principle Restricts write access to payment request documents.
     */
    match /paymentRequests/{requestId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for budget documents.
     * @path /budgets/{budgetId}
     * @allow (get, list) Any authenticated user can read budget data.
     * @allow (create, update, delete) No one can create, update, or delete budget data.
     * @deny (create, update, delete) No one can create, update, or delete budget data.
     * @principle Restricts write access to budget documents.
     */
    match /budgets/{budgetId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for leave request documents.
     * @path /leaveRequests/{requestId}
     * @allow (get, list) Any authenticated user can read leave request data.
     * @allow (create, update, delete) No one can create, update, or delete leave request data.
     * @deny (create, update, delete) No one can create, update, or delete leave request data.
     * @principle Restricts write access to leave request documents.
     */
    match /leaveRequests/{requestId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
     * @description Rules for user permissions.
     * @path /userPermissions/{userId}
     * @allow (create) User with UID 'user123' can create their permission document.
     *   request.auth.uid == 'user123'
     *   request.resource.data.userId == 'user123'
     * @allow (get, update, delete) User with UID 'user123' can access/modify their permission document.
     *   request.auth.uid == 'user123'
     * @deny (create) User with UID 'user456' cannot create a permission document for 'user123'.
     *   request.auth.uid == 'user456'
     *   request.resource.data.userId == 'user123'
     * @deny (get, update, delete) User with UID 'user456' cannot access/modify permission document of 'user123'.
     *   request.auth.uid == 'user456'
     * @principle Enforces document ownership for user permissions.
     */
    match /userPermissions/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for produksi department data.
     * @path /produksi/{produksiId}
     * @allow (get, list) Any authenticated user can read produksi data.
     * @allow (create, update, delete) No one can create, update, or delete produksi data.
     * @deny (create, update, delete) No one can create, update, or delete produksi data.
     * @principle Restricts write access to produksi documents.
     */
    match /produksi/{produksiId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for geologi department data.
     * @path /geologi/{geologiId}
     * @allow (get, list) Any authenticated user can read geologi data.
     * @allow (create, update, delete) No one can create, update, or delete geologi data.
     * @deny (create, update, delete) No one can create, update, or delete geologi data.
     * @principle Restricts write access to geologi documents.
     */
    match /geologi/{geologiId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for pengolahan department data.
     * @path /pengolahan/{pengolahanId}
     * @allow (get, list) Any authenticated user can read pengolahan data.
     * @allow (create, update, delete) No one can create, update, or delete pengolahan data.
     * @deny (create, update, delete) No one can create, update, or delete pengolahan data.
     * @principle Restricts write access to pengolahan documents.
     */
    match /pengolahan/{pengolahanId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for K3L department data.
     * @path /k3l/{k3lId}
     * @allow (get, list) Any authenticated user can read K3L data.
     * @allow (create, update, delete) No one can create, update, or delete K3L data.
     * @deny (create, update, delete) No one can create, update, or delete K3L data.
     * @principle Restricts write access to K3L documents.
     */
    match /k3l/{k3lId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for keuangan department data.
     * @path /keuangan/{keuanganId}
     * @allow (get, list) Any authenticated user can read keuangan data.
     * @allow (create, update, delete) No one can create, update, or delete keuangan data.
     * @deny (create, update, delete) No one can create, update, or delete keuangan data.
     * @principle Restricts write access to keuangan documents.
     */
    match /keuangan/{keuanganId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for SDM department data.
     * @path /sdm/{sdmId}
     * @allow (get, list) Any authenticated user can read SDM data.
     * @allow (create, update, delete) No one can create, update, or delete SDM data.
     * @deny (create, update, delete) No one can create, update, or delete SDM data.
     * @principle Restricts write access to SDM documents.
     */
    match /sdm/{sdmId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for IT department data.
     * @path /it/{itId}
     * @allow (get, list) Any authenticated user can read IT data.
     * @allow (create, update, delete) No one can create, update, or delete IT data.
     * @deny (create, update, delete) No one can create, update, or delete IT data.
     * @principle Restricts write access to IT documents.
     */
    match /it/{itId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}