/**
 * @file Overview
 * This ruleset enforces a multi-tenant security model.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves (ownership).
 * - /kpi/{kpiId}, /announcements/{announcementId}, /productionStatus/{statusId}, /paymentRequests/{requestId}, /budgets/{budgetId}, /leaveRequests/{requestId}, /userPermissions/{userId}, /helpdeskTickets/{ticketId}, /incidents/{incidentId}, /inventory/{itemId}, /purchaseRequestsSC/{prId}, /shipments/{shipmentId}, /assets/{assetId}, /maintenanceTasks/{taskId}, /generalLedger/{entryId}, /invoices/{invoiceId}, /bills/{billId}, /bankAccounts/{accountId}, /produksi/{produksiId}, /geologi/{geologiId}, /pengolahan/{pengolahanId}, /k3l/{k3lId}, /keuangan/{keuanganId}, /sdm/{sdmId}, /it/{itId}: Top-level collections for various data entities.
 *
 * Key Security Decisions:
 * - User data is private and only accessible to the authenticated user.
 * - All other collections are publicly readable, but writes are disallowed in this prototype. This allows for quick data exploration and UI development. In a production environment, write access to these collections would need to be controlled based on user roles or other authorization mechanisms.
 *
 * Denormalization for Authorization:
 * - The current ruleset does not denormalize any data. If more complex authorization schemes are needed (e.g., role-based access to specific documents), data should be denormalized onto the documents to avoid expensive `get()` calls in the security rules.
 *
 * Structural Segregation:
 * - The data model uses structural segregation by storing different types of data in separate top-level collections. This allows for more straightforward security rules and better performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows each user to read and write their own user document.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with ID matching {userId} can create their profile.
     * @allow (get, update, delete) - Authenticated user with ID matching {userId} can read/write their profile.
     * @deny (create) - Authenticated user with ID NOT matching {userId} cannot create this profile.
     * @deny (get, update, delete) - Authenticated user with ID NOT matching {userId} cannot read/write this profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Allows anyone to read KPI data. Write operations are denied in this prototype.
     * @path /kpi/{kpiId}
     * @allow (get, list) - Any user, authenticated or not, can read KPIs.
     * @deny (create, update, delete) - No one can create, update, or delete KPIs in this prototype.
     * @principle Allows public read access with restricted writes for a top-level collection.
     */
    match /kpi/{kpiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read announcement data. Write operations are denied in this prototype.
     * @path /announcements/{announcementId}
     * @allow (get, list) - Any user, authenticated or not, can read announcements.
     * @deny (create, update, delete) - No one can create, update, or delete announcements in this prototype.
     * @principle Allows public read access with restricted writes for a top-level collection.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read production status data. Write operations are denied in this prototype.
     * @path /productionStatus/{statusId}
     * @allow (get, list) - Any user, authenticated or not, can read production statuses.
     * @deny (create, update, delete) - No one can create, update, or delete production statuses in this prototype.
     * @principle Allows public read access with restricted writes for a top-level collection.
     */
    match /productionStatus/{statusId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read payment request data. Write operations are denied in this prototype.
     * @path /paymentRequests/{requestId}
     * @allow (get, list) - Any user, authenticated or not, can read payment requests.
     * @deny (create, update, delete) - No one can create, update, or delete payment requests in this prototype.
     * @principle Allows public read access with restricted writes for a top-level collection.
     */
    match /paymentRequests/{requestId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read budget data. Write operations are denied in this prototype.
     * @path /budgets/{budgetId}
     * @allow (get, list) - Any user, authenticated or not, can read budget data.
     * @deny (create, update, delete) - No one can create, update, or delete budget data in this prototype.
     * @principle Allows public read access with restricted writes for a top-level collection.
     */
    match /budgets/{budgetId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read leave request data. Write operations are denied in this prototype.
     * @path /leaveRequests/{requestId}
     * @allow (get, list) - Any user, authenticated or not, can read leave request data.
     * @deny (create, update, delete) - No one can create, update, or delete leave request data in this prototype.
     * @principle Allows public read access with restricted writes for a top-level collection.
     */
    match /leaveRequests/{requestId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read user permission data. Write operations are denied in this prototype.
     * @path /userPermissions/{userId}
     * @allow (get, list) - Any user, authenticated or not, can read user permissions.
     * @deny (create, update, delete) - No one can create, update, or delete user permissions in this prototype.
     * @principle Allows public read access with restricted writes for a top-level collection.
     */
    match /userPermissions/{userId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read helpdesk ticket data. Write operations are denied in this prototype.
     * @path /helpdeskTickets/{ticketId}
     * @allow (get, list) - Any user, authenticated or not, can read helpdesk tickets.
     * @deny (create, update, delete) - No one can create, update, or delete helpdesk tickets in this prototype.
     * @principle Allows public read access with restricted writes for a top-level collection.
     */
    match /helpdeskTickets/{ticketId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
     * @description Allows anyone to read incident data. Write operations are denied in this prototype.
     * @path /incidents/{incidentId}
     * @allow (get, list) - Any user, authenticated or not, can read incidents.
     * @deny (create, update, delete) - No one can create, update, or delete incidents in this prototype.
     * @principle Allows public read access with restricted writes for a top-level collection.
     */
    match /incidents/{incidentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read inventory data. Write operations are denied in this prototype.
     * @path /inventory/{itemId}
     * @allow (get, list) - Any user, authenticated or not, can read inventory items.
     * @deny (create, update, delete) - No one can create, update, or delete inventory items in this prototype.
     * @principle Allows public read access with restricted writes for a top-level collection.
     */
    match /inventory/{itemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read purchase request data. Write operations are denied in this prototype.
     * @path /purchaseRequestsSC/{prId}
     * @allow (get, list) - Any user, authenticated or not, can read purchase requests.
     * @deny (create, update, delete) - No one can create, update, or delete purchase requests in this prototype.
     * @principle Allows public read access with restricted writes for a top-level collection.
     */
    match /purchaseRequestsSC/{prId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read shipment data. Write operations are denied in this prototype.
     * @path /shipments/{shipmentId}
     * @allow (get, list) - Any user, authenticated or not, can read shipments.
     * @deny (create, update, delete) - No one can create, update, or delete shipments in this prototype.
     * @principle Allows public read access with restricted writes for a top-level collection.
     */
    match /shipments/{shipmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read asset data. Write operations are denied in this prototype.
     * @path /assets/{assetId}
     * @allow (get, list) - Any user, authenticated or not, can read assets.
     * @deny (create, update, delete) - No one can create, update, or delete assets in this prototype.
     * @principle Allows public read access with restricted writes for a top-level collection.
     */
    match /assets/{assetId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read maintenance task data. Write operations are denied in this prototype.
     * @path /maintenanceTasks/{taskId}
     * @allow (get, list) - Any user, authenticated or not, can read maintenance tasks.
     * @deny (create, update, delete) - No one can create, update, or delete maintenance tasks in this prototype.
     * @principle Allows public read access with restricted writes for a top-level collection.
     */
    match /maintenanceTasks/{taskId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read general ledger entry data. Write operations are denied in this prototype.
     * @path /generalLedger/{entryId}
     * @allow (get, list) - Any user, authenticated or not, can read general ledger entries.
     * @deny (create, update, delete) - No one can create, update, or delete general ledger entries in this prototype.
     */
    match /generalLedger/{entryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read invoice data. Write operations are denied in this prototype.
     * @path /invoices/{invoiceId}
     * @allow (get, list) - Any user, authenticated or not, can read invoices.
     * @deny (create, update, delete) - No one can create, update, or delete invoices in this prototype.
     */
    match /invoices/{invoiceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read bill data. Write operations are denied in this prototype.
     * @path /bills/{billId}
     * @allow (get, list) - Any user, authenticated or not, can read bills.
     * @deny (create, update, delete) - No one can create, update, or delete bills in this prototype.
     */
    match /bills/{billId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read bank account data. Write operations are denied in this prototype.
     * @path /bankAccounts/{accountId}
     * @allow (get, list) - Any user, authenticated or not, can read bank accounts.
     * @deny (create, update, delete) - No one can create, update, or delete bank accounts in this prototype.
     */
    match /bankAccounts/{accountId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read produksi data. Write operations are denied in this prototype.
     * @path /produksi/{produksiId}
     * @allow (get, list) - Any user, authenticated or not, can read produksi data.
     * @deny (create, update, delete) - No one can create, update, or delete produksi data in this prototype.
     * @principle Allows public read access with restricted writes for a top-level collection.
     */
    match /produksi/{produksiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read geologi data. Write operations are denied in this prototype.
     * @path /geologi/{geologiId}
     * @allow (get, list) - Any user, authenticated or not, can read geologi data.
     * @deny (create, update, delete) - No one can create, update, or delete geologi data in this prototype.
     * @principle Allows public read access with restricted writes for a top-level collection.
     */
    match /geologi/{geologiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read pengolahan data. Write operations are denied in this prototype.
     * @path /pengolahan/{pengolahanId}
     * @allow (get, list) - Any user, authenticated or not, can read pengolahan data.
     * @deny (create, update, delete) - No one can create, update, or delete pengolahan data in this prototype.
     * @principle Allows public read access with restricted writes for a top-level collection.
     */
    match /pengolahan/{pengolahanId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read K3L data. Write operations are denied in this prototype.
     * @path /k3l/{k3lId}
     * @allow (get, list) - Any user, authenticated or not, can read K3L data.
     * @deny (create, update, delete) - No one can create, update, or delete K3L data in this prototype.
     * @principle Allows public read access with restricted writes for a top-level collection.
     */
    match /k3l/{k3lId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read keuangan data. Write operations are denied in this prototype.
     * @path /keuangan/{keuanganId}
     * @allow (get, list) - Any user, authenticated or not, can read keuangan data.
     * @deny (create, update, delete) - No one can create, update, or delete keuangan data in this prototype.
     * @principle Allows public read access with restricted writes for a top-level collection.
     */
    match /keuangan/{keuanganId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read SDM data. Write operations are denied in this prototype.
     * @path /sdm/{sdmId}
     * @allow (get, list) - Any user, authenticated or not, can read SDM data.
     * @deny (create, update, delete) - No one can create, update, or delete SDM data in this prototype.
     * @principle Allows public read access with restricted writes for a top-level collection.
     */
    match /sdm/{sdmId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read IT data. Write operations are denied in this prototype.
     * @path /it/{itId}
     * @allow (get, list) - Any user, authenticated or not, can read IT data.
     * @deny (create, update, delete) - No one can create, update, or delete IT data in this prototype.
     * @principle Allows public read access with restricted writes for a top-level collection.
     */
    match /it/{itId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}