/**
 * @fileoverview Firestore Security Rules for MineVision application.
 *
 * Core Philosophy:
 * This ruleset enforces a mixed security model. User data is strictly controlled,
 * while departmental data is publicly readable. The user collection is owner-only,
 * ensuring users can only access their own profile data. Other data collections
 * such as KPI, Announcements, ProductionStatus, PaymentRequests, Budgets, LeaveRequests, UserPermissions,
 * HelpdeskTickets, Inventory, PurchaseRequestsSC, Shipments, Assets and MaintenanceTasks
 * are publicly readable but only writable by authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Access is restricted to the
 *   user with the matching userId.
 * - /kpi/{kpiId}: Stores Key Performance Indicators data.
 * - /announcements/{announcementId}: Stores announcements for the dashboard.
 * - /productionStatus/{statusId}: Stores real-time production status data.
 * - /paymentRequests/{requestId}: Stores payment requests.
 * - /budgets/{budgetId}: Stores budget information.
 * - /leaveRequests/{requestId}: Stores employee leave requests.
 * - /userPermissions/{userId}: Stores user permissions.
 * - /helpdeskTickets/{ticketId}: Stores helpdesk tickets.
 * - /inventory/{itemId}: Stores supply chain inventory items.
 * - /purchaseRequestsSC/{prId}: Stores supply chain purchase requests.
 * - /shipments/{shipmentId}: Stores shipment data.
 * - /assets/{assetId}: Stores asset information.
 * - /maintenanceTasks/{taskId}: Stores maintenance task information.
 * - /produksi/{produksiId}: Stores produksi department data.
 * - /geologi/{geologiId}: Stores geologi department data.
 * - /pengolahan/{pengolahanId}: Stores pengolahan department data.
 * - /k3l/{k3lId}: Stores K3L department data.
 * - /keuangan/{keuanganId}: Stores keuangan department data.
 * - /sdm/{sdmId}: Stores SDM department data.
 * - /it/{itId}: Stores IT department data.
 *
 * Key Security Decisions:
 * - Listing users is denied to prevent unauthorized data access.
 * - Departmental data (produksi, geologi, pengolahan, k3l, keuangan, sdm, it)
 *   is publicly readable to facilitate easy access and display on the dashboard.
 * - All write operations require user authentication (`isSignedIn()`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication check.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested userId matches the authenticated user's ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authorization check.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requested userId matches the authenticated user's ID and the resource exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authorization and existence check.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user documents.
     * @path /users/{userId}
     * @allow (create) User with uid 'user123' can create their own document at /users/user123.
     * @deny (create) User with uid 'user123' cannot create a document at /users/user456.
     * @allow (get) User with uid 'user123' can read their own document at /users/user123.
     * @deny (get) User with uid 'user123' cannot read another user's document at /users/user456.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for KPI documents.
     * @path /kpi/{kpiId}
     * @allow (get) Any user can read KPI data.
     * @deny (create) Anonymous user cannot create KPI data.
     * @principle Public read, authenticated write.
     */
    match /kpi/{kpiId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for Announcement documents.
     * @path /announcements/{announcementId}
     * @allow (get) Any user can read announcement data.
     * @deny (create) Anonymous user cannot create announcement data.
     * @principle Public read, authenticated write.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for ProductionStatus documents.
     * @path /productionStatus/{statusId}
     * @allow (get) Any user can read production status data.
     * @deny (create) Anonymous user cannot create production status data.
     * @principle Public read, authenticated write.
     */
    match /productionStatus/{statusId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for PaymentRequest documents.
     * @path /paymentRequests/{requestId}
     * @allow (get) Any user can read payment request data.
     * @deny (create) Anonymous user cannot create payment request data.
     * @principle Public read, authenticated write.
     */
    match /paymentRequests/{requestId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for Budget documents.
     * @path /budgets/{budgetId}
     * @allow (get) Any user can read budget data.
     * @deny (create) Anonymous user cannot create budget data.
     * @principle Public read, authenticated write.
     */
    match /budgets/{budgetId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for LeaveRequest documents.
     * @path /leaveRequests/{requestId}
     * @allow (get) Any user can read leave request data.
     * @deny (create) Anonymous user cannot create leave request data.
     * @principle Public read, authenticated write.
     */
    match /leaveRequests/{requestId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for UserPermissions documents.
     * @path /userPermissions/{userId}
     * @allow (get) Any user can read user permissions data.
     * @deny (create) Anonymous user cannot create user permissions data.
     * @principle Public read, authenticated write.
     */
    match /userPermissions/{userId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for HelpdeskTicket documents.
     * @path /helpdeskTickets/{ticketId}
     * @allow (get) Any user can read helpdesk ticket data.
     * @deny (create) Anonymous user cannot create helpdesk ticket data.
     * @principle Public read, authenticated write.
     */
    match /helpdeskTickets/{ticketId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for InventoryItem documents.
     * @path /inventory/{itemId}
     * @allow (get) Any user can read inventory item data.
     * @deny (create) Anonymous user cannot create inventory item data.
     * @principle Public read, authenticated write.
     */
    match /inventory/{itemId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for PurchaseRequestSC documents.
     * @path /purchaseRequestsSC/{prId}
     * @allow (get) Any user can read purchase request data.
     * @deny (create) Anonymous user cannot create purchase request data.
     * @principle Public read, authenticated write.
     */
    match /purchaseRequestsSC/{prId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for Shipment documents.
     * @path /shipments/{shipmentId}
     * @allow (get) Any user can read shipment data.
     * @deny (create) Anonymous user cannot create shipment data.
     * @principle Public read, authenticated write.
     */
    match /shipments/{shipmentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for Asset documents.
     * @path /assets/{assetId}
     * @allow (get) Any user can read asset data.
     * @deny (create) Anonymous user cannot create asset data.
     * @principle Public read, authenticated write.
     */
    match /assets/{assetId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for MaintenanceTask documents.
     * @path /maintenanceTasks/{taskId}
     * @allow (get) Any user can read maintenance task data.
     * @deny (create) Anonymous user cannot create maintenance task data.
     * @principle Public read, authenticated write.
     */
    match /maintenanceTasks/{taskId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for Produksi documents.
     * @path /produksi/{produksiId}
     * @allow (get) Any user can read produksi data.
     * @deny (create) Anonymous user cannot create produksi data.
     * @principle Public read, authenticated write.
     */
    match /produksi/{produksiId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for Geologi documents.
     * @path /geologi/{geologiId}
     * @allow (get) Any user can read geologi data.
     * @deny (create) Anonymous user cannot create geologi data.
     * @principle Public read, authenticated write.
     */
    match /geologi/{geologiId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for Pengolahan documents.
     * @path /pengolahan/{pengolahanId}
     * @allow (get) Any user can read pengolahan data.
     * @deny (create) Anonymous user cannot create pengolahan data.
     * @principle Public read, authenticated write.
     */
    match /pengolahan/{pengolahanId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for K3L documents.
     * @path /k3l/{k3lId}
     * @allow (get) Any user can read K3L data.
     * @deny (create) Anonymous user cannot create K3L data.
     * @principle Public read, authenticated write.
     */
    match /k3l/{k3lId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for Keuangan documents.
     * @path /keuangan/{keuanganId}
     * @allow (get) Any user can read keuangan data.
     * @deny (create) Anonymous user cannot create keuangan data.
     * @principle Public read, authenticated write.
     */
    match /keuangan/{keuanganId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for SDM documents.
     * @path /sdm/{sdmId}
     * @allow (get) Any user can read SDM data.
     * @deny (create) Anonymous user cannot create SDM data.
     * @principle Public read, authenticated write.
     */
    match /sdm/{sdmId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for IT documents.
     * @path /it/{itId}
     * @allow (get) Any user can read IT data.
     * @deny (create) Anonymous user cannot create IT data.
     * @principle Public read, authenticated write.
     */
    match /it/{itId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}