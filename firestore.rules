/**
 * @fileoverview Firestore Security Rules for MineVision application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of owner-based and role-based access control.
 * User data is strictly controlled by the user themselves.
 * Public data (e.g., KPIs, Announcements) is readable by all, but writable only by authorized users.
 * Department-specific data is publicly readable.
 *
 * Data Structure:
 * - /users/{userId}: User account information (private).
 * - /kpi/{kpiId}: Key Performance Indicators (public read, restricted write).
 * - /announcements/{announcementId}: Announcements (public read, restricted write).
 * - /productionStatus/{statusId}: Production Status (public read, restricted write).
 * - /paymentRequests/{requestId}: Payment Requests (restricted).
 * - /budgets/{budgetId}: Budgets (restricted).
 * - /leaveRequests/{requestId}: Leave Requests (restricted).
 * - /userPermissions/{userId}: User Permissions (restricted).
 * - /helpdeskTickets/{ticketId}: Helpdesk Tickets (restricted).
 * - /inventory/{itemId}: Inventory Items (restricted).
 * - /purchaseRequestsSC/{prId}: Purchase Requests (restricted).
 * - /shipments/{shipmentId}: Shipments (restricted).
 * - /assets/{assetId}: Assets (restricted).
 * - /maintenanceTasks/{taskId}: Maintenance Tasks (restricted).
 * - /produksi/{produksiId}: Produksi Department Data (public read).
 * - /geologi/{geologiId}: Geologi Department Data (public read).
 * - /pengolahan/{pengolahanId}: Pengolahan Department Data (public read).
 * - /k3l/{k3lId}: K3L Department Data (public read).
 * - /keuangan/{keuanganId}: Keuangan Department Data (public read).
 * - /sdm/{sdmId}: SDM Department Data (public read).
 * - /it/{itId}: IT Department Data (public read).
 *
 * Key Security Decisions:
 * - Users can only read and write their own user document.
 * - Listing of users is denied to prevent information disclosure.
 * - Public collections are readable by everyone.
 * - All write operations on protected collections require authentication.
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID and that the document exists.
     */
    function isExistingOwner(userId) {
        return (isOwner(userId) && resource != null);
    }

    /**
     * @description Rule for /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own user document if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can get, update, and delete their own user document.
     * @deny (create) - If the userId does not match the auth.uid.
     * @deny (get, update, delete) - If the user is not authenticated or does not own the document.
     * @deny (list) -  Listing users is not allowed.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for /kpi/{kpiId} collection.
     * @path /kpi/{kpiId}
     * @allow (get, list) - Anyone can read the KPI data.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete KPI data.
     * @deny (create, update, delete) - If the user is not authenticated.
     * @principle Allows public read access but requires authentication for writes.
     */
    match /kpi/{kpiId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Rule for /announcements/{announcementId} collection.
     * @path /announcements/{announcementId}
     * @allow (get, list) - Anyone can read the announcement data.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete announcement data.
     * @deny (create, update, delete) - If the user is not authenticated.
     * @principle Allows public read access but requires authentication for writes.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Rule for /productionStatus/{statusId} collection.
     * @path /productionStatus/{statusId}
     * @allow (get, list) - Anyone can read the production status data.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete production status data.
     * @deny (create, update, delete) - If the user is not authenticated.
     * @principle Allows public read access but requires authentication for writes.
     */
    match /productionStatus/{statusId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Rule for /paymentRequests/{requestId} collection.
     * @path /paymentRequests/{requestId}
     * @allow get: if isSignedIn();
     * @allow list: if isSignedIn();
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny create, update, delete: if !isSignedIn();
     * @principle Requires authentication for all operations.
     */
    match /paymentRequests/{requestId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rule for /budgets/{budgetId} collection.
     * @path /budgets/{budgetId}
     * @allow get: if isSignedIn();
     * @allow list: if isSignedIn();
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny create, update, delete: if !isSignedIn();
     * @principle Requires authentication for all operations.
     */
    match /budgets/{budgetId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rule for /leaveRequests/{requestId} collection.
     * @path /leaveRequests/{requestId}
     * @allow get: if isSignedIn();
     * @allow list: if isSignedIn();
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny create, update, delete: if !isSignedIn();
     * @principle Requires authentication for all operations.
     */
    match /leaveRequests/{requestId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rule for /userPermissions/{userId} collection.
     * @path /userPermissions/{userId}
     * @allow get: if isSignedIn();
     * @allow list: if isSignedIn();
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny create, update, delete: if !isSignedIn();
     * @principle Requires authentication for all operations.
     */
    match /userPermissions/{userId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

   /**
     * @description Rule for /helpdeskTickets/{ticketId} collection.
     * @path /helpdeskTickets/{ticketId}
     * @allow get: if isSignedIn();
     * @allow list: if isSignedIn();
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny create, update, delete: if !isSignedIn();
     * @principle Requires authentication for all operations.
     */
    match /helpdeskTickets/{ticketId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

   /**
     * @description Rule for /inventory/{itemId} collection.
     * @path /inventory/{itemId}
     * @allow get: if isSignedIn();
     * @allow list: if isSignedIn();
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny create, update, delete: if !isSignedIn();
     * @principle Requires authentication for all operations.
     */
    match /inventory/{itemId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

   /**
     * @description Rule for /purchaseRequestsSC/{prId} collection.
     * @path /purchaseRequestsSC/{prId}
     * @allow get: if isSignedIn();
     * @allow list: if isSignedIn();
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny create, update, delete: if !isSignedIn();
     * @principle Requires authentication for all operations.
     */
    match /purchaseRequestsSC/{prId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

   /**
     * @description Rule for /shipments/{shipmentId} collection.
     * @path /shipments/{shipmentId}
     * @allow get: if isSignedIn();
     * @allow list: if isSignedIn();
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny create, update, delete: if !isSignedIn();
     * @principle Requires authentication for all operations.
     */
    match /shipments/{shipmentId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

   /**
     * @description Rule for /assets/{assetId} collection.
     * @path /assets/{assetId}
     * @allow get: if isSignedIn();
     * @allow list: if isSignedIn();
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny create, update, delete: if !isSignedIn();
     * @principle Requires authentication for all operations.
     */
    match /assets/{assetId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

   /**
     * @description Rule for /maintenanceTasks/{taskId} collection.
     * @path /maintenanceTasks/{taskId}
     * @allow get: if isSignedIn();
     * @allow list: if isSignedIn();
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn() && resource != null;
     * @allow delete: if isSignedIn() && resource != null;
     * @deny create, update, delete: if !isSignedIn();
     * @principle Requires authentication for all operations.
     */
    match /maintenanceTasks/{taskId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rule for /produksi/{produksiId} collection.
     * @path /produksi/{produksiId}
     * @allow (get, list) - Anyone can read the produksi data.
     * @deny (create, update, delete) - No one can write to the produksi data.
     * @principle Allows public read access and restricts all write access.
     */
    match /produksi/{produksiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for /geologi/{geologiId} collection.
     * @path /geologi/{geologiId}
     * @allow (get, list) - Anyone can read the geologi data.
     * @deny (create, update, delete) - No one can write to the geologi data.
     * @principle Allows public read access and restricts all write access.
     */
    match /geologi/{geologiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for /pengolahan/{pengolahanId} collection.
     * @path /pengolahan/{pengolahanId}
     * @allow (get, list) - Anyone can read the pengolahan data.
     * @deny (create, update, delete) - No one can write to the pengolahan data.
     * @principle Allows public read access and restricts all write access.
     */
    match /pengolahan/{pengolahanId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for /k3l/{k3lId} collection.
     * @path /k3l/{k3lId}
     * @allow (get, list) - Anyone can read the K3L data.
     * @deny (create, update, delete) - No one can write to the K3L data.
     * @principle Allows public read access and restricts all write access.
     */
    match /k3l/{k3lId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for /keuangan/{keuanganId} collection.
     * @path /keuangan/{keuanganId}
     * @allow (get, list) - Anyone can read the keuangan data.
     * @deny (create, update, delete) - No one can write to the keuangan data.
     * @principle Allows public read access and restricts all write access.
     */
    match /keuangan/{keuanganId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for /sdm/{sdmId} collection.
     * @path /sdm/{sdmId}
     * @allow (get, list) - Anyone can read the SDM data.
     * @deny (create, update, delete) - No one can write to the SDM data.
     * @principle Allows public read access and restricts all write access.
     */
    match /sdm/{sdmId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for /it/{itId} collection.
     * @path /it/{itId}
     * @allow (get, list) - Anyone can read the IT data.
     * @deny (create, update, delete) - No one can write to the IT data.
     * @principle Allows public read access and restricts all write access.
     */
    match /it/{itId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}