/**
 * @file Overview
 * This ruleset enforces a combination of owner-only access for user-specific data and public read access with owner-only writes for other collections.
 *
 * Data Structure:
 * - /users/{userId}: Stores user account information. Accessible only by the user themselves (Ownership).
 * - /kpi/{kpiId}: Stores KPI data. Public read access, owner-only writes.
 * - /announcements/{announcementId}: Stores announcement data. Public read access, owner-only writes.
 * - /productionStatus/{statusId}: Stores production status data. Public read access, owner-only writes.
 * - /paymentRequests/{requestId}: Stores payment approval requests. Public read access, owner-only writes.
 * - /budgets/{budgetId}: Stores budget data. Public read access, owner-only writes.
 * - /leaveRequests/{requestId}: Stores leave requests. Public read access, owner-only writes.
 * - /userPermissions/{userId}: Stores user-specific permissions. Accessible only by the user themselves (Ownership).
 * - /helpdeskTickets/{ticketId}: Stores helpdesk tickets. Public read access, owner-only writes.
 * - /inventory/{itemId}: Stores inventory data. Public read access, owner-only writes.
 * - /purchaseRequestsSC/{prId}: Stores purchase requests. Public read access, owner-only writes.
 * - /shipments/{shipmentId}: Stores shipment data. Public read access, owner-only writes.
 * - /assets/{assetId}: Stores asset data. Public read access, owner-only writes.
 * - /maintenanceTasks/{taskId}: Stores maintenance task data. Public read access, owner-only writes.
 * - /generalLedger/{entryId}: Stores general ledger entries. Public read access, owner-only writes.
 * - /invoices/{invoiceId}: Stores invoice data. Public read access, owner-only writes.
 * - /bills/{billId}: Stores bill data. Public read access, owner-only writes.
 * - /produksi/{produksiId}: Stores produksi department data. Public read access.
 * - /geologi/{geologiId}: Stores geologi department data. Public read access.
 * - /pengolahan/{pengolahanId}: Stores pengolahan department data. Public read access.
 * - /k3l/{k3lId}: Stores K3L department data. Public read access.
 * - /keuangan/{keuanganId}: Stores keuangan department data. Public read access.
 * - /sdm/{sdmId}: Stores SDM department data. Public read access.
 * - /it/{itId}: Stores IT department data. Public read access.
 *
 * Key Security Decisions:
 * - All write operations (create, update, delete) require an authenticated user.
 * - Listing of documents is allowed only for the owner in the /users/{userId} collection. Other collections are publicly listable, but writes are restricted to authenticated users.
 * - Data validation is minimal in this prototyping phase, focusing on authorization and relational integrity.
 * - Public read access is enabled for the dashboard-related collections (`kpi`, `announcements`, `productionStatus`) as the application is read-only.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user account information.
     * @path /users/{userId}
     * @allow (create) if request.auth.uid == userId
     * @allow (get, list, update, delete) if request.auth.uid == userId
     * @deny (create) if request.auth == null
     * @deny (get, list, update, delete) if request.auth == null
     * @principle Enforces document ownership for reads and writes
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Stores KPI data for the main dashboard.
     * @path /kpi/{kpiId}
     * @allow (get, list) public read access
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn() && resource != null
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Public read, owner-only writes
     */
    match /kpi/{kpiId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Stores announcement data for the main dashboard.
     * @path /announcements/{announcementId}
     * @allow (get, list) public read access
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn() && resource != null
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Public read, owner-only writes
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Stores production status data for the main dashboard.
     * @path /productionStatus/{statusId}
     * @allow (get, list) public read access
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn() && resource != null
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Public read, owner-only writes
     */
    match /productionStatus/{statusId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Stores payment approval requests.
     * @path /paymentRequests/{requestId}
     * @allow (get, list) public read access
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn() && resource != null
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Public read, owner-only writes
     */
    match /paymentRequests/{requestId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Stores budget data.
     * @path /budgets/{budgetId}
     * @allow (get, list) public read access
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn() && resource != null
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Public read, owner-only writes
     */
    match /budgets/{budgetId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Stores all employee leave requests.
     * @path /leaveRequests/{requestId}
     * @allow (get, list) public read access
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn() && resource != null
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Public read, owner-only writes
     */
    match /leaveRequests/{requestId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Stores permissions for each user.
     * @path /userPermissions/{userId}
     * @allow (create) if request.auth.uid == userId
     * @allow (get, list, update, delete) if request.auth.uid == userId
     * @deny (create) if request.auth == null
     * @deny (get, list, update, delete) if request.auth == null
     * @principle Enforces document ownership for reads and writes
     */
    match /userPermissions/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Stores all helpdesk support tickets.
     * @path /helpdeskTickets/{ticketId}
     * @allow (get, list) public read access
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn() && resource != null
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Public read, owner-only writes
     */
    match /helpdeskTickets/{ticketId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Stores supply chain inventory items.
     * @path /inventory/{itemId}
     * @allow (get, list) public read access
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn() && resource != null
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Public read, owner-only writes
     */
    match /inventory/{itemId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Stores supply chain purchase requests.
     * @path /purchaseRequestsSC/{prId}
     * @allow (get, list) public read access
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn() && resource != null
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Public read, owner-only writes
     */
    match /purchaseRequestsSC/{prId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Stores shipment and logistics data.
     * @path /shipments/{shipmentId}
     * @allow (get, list) public read access
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn() && resource != null
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Public read, owner-only writes
     */
    match /shipments/{shipmentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Stores company asset information.
     * @path /assets/{assetId}
     * @allow (get, list) public read access
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn() && resource != null
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Public read, owner-only writes
     */
    match /assets/{assetId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Stores all maintenance tasks and history.
     * @path /maintenanceTasks/{taskId}
     * @allow (get, list) public read access
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn() && resource != null
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Public read, owner-only writes
     */
    match /maintenanceTasks/{taskId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

     /**
      * @description Stores all general ledger journal entries.
      * @path /generalLedger/{entryId}
      * @allow (get, list) public read access
      * @allow (create) if isSignedIn()
      * @allow (update, delete) if isSignedIn() && resource != null
      * @deny (create, update, delete) if !isSignedIn()
      * @principle Public read, owner-only writes
      */
    match /generalLedger/{entryId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
      * @description Stores accounts receivable invoices.
      * @path /invoices/{invoiceId}
      * @allow (get, list) public read access
      * @allow (create) if isSignedIn()
      * @allow (update, delete) if isSignedIn() && resource != null
      * @deny (create, update, delete) if !isSignedIn()
      * @principle Public read, owner-only writes
      */
    match /invoices/{invoiceId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
      * @description Stores accounts payable bills from vendors.
      * @path /bills/{billId}
      * @allow (get, list) public read access
      * @allow (create) if isSignedIn()
      * @allow (update, delete) if isSignedIn() && resource != null
      * @deny (create, update, delete) if !isSignedIn()
      * @principle Public read, owner-only writes
      */
    match /bills/{billId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }
    /**
     * @description Stores produksi department data.
     * @path /produksi/{produksiId}
     * @allow (get, list) public read access
     * @deny (create, update, delete) all writes
     * @principle Public read
     */
    match /produksi/{produksiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Stores geologi department data.
     * @path /geologi/{geologiId}
     * @allow (get, list) public read access
     * @deny (create, update, delete) all writes
     * @principle Public read
     */
    match /geologi/{geologiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Stores pengolahan department data.
     * @path /pengolahan/{pengolahanId}
     * @allow (get, list) public read access
     * @deny (create, update, delete) all writes
     * @principle Public read
     */
    match /pengolahan/{pengolahanId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Stores K3L department data.
     * @path /k3l/{k3lId}
     * @allow (get, list) public read access
     * @deny (create, update, delete) all writes
     * @principle Public read
     */
    match /k3l/{k3lId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Stores keuangan department data.
     * @path /keuangan/{keuanganId}
     * @allow (get, list) public read access
     * @deny (create, update, delete) all writes
     * @principle Public read
     */
    match /keuangan/{keuanganId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Stores SDM department data.
     * @path /sdm/{sdmId}
     * @allow (get, list) public read access
     * @deny (create, update, delete) all writes
     * @principle Public read
     */
    match /sdm/{sdmId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Stores IT department data.
     * @path /it/{itId}
     * @allow (get, list) public read access
     * @deny (create, update, delete) all writes
     * @principle Public read
     */
    match /it/{itId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}