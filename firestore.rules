/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a hybrid security model: user-owned data with public read access for some collections.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user-specific data, accessible only by the owner.
 * - Top-level collections (`kpi`, `announcements`, `productionStatus`, `paymentRequests`, `budgets`, `leaveRequests`, `userPermissions`, `helpdeskTickets`, `produksi`, `geologi`, `pengolahan`, `k3l`, `keuangan`, `sdm`, `it`) store various data types.
 *
 * Key Security Decisions:
 * - User data in `/users/{userId}` is strictly private and only accessible to the authenticated user.
 * - Data for `produksi`, `geologi`, `pengolahan`, `k3l`, `keuangan`, `sdm`, `it` are publicly readable, while writes are disallowed.
 * - The `helpdeskTickets` collection defaults to owner-only access (requiring user authentication) for all operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces user-ownership for data stored under /users/{userId}.
     * @path /users/{userId}
     * @allow (create) Authenticated user with matching userId can create their own document.
     * @allow (get, list, update, delete) Authenticated user can access and modify their own document.
     * @deny (create) User tries to create a document with a userId that doesn't match their auth UID.
     * @principle Enforces strict user-ownership for all operations.
     */
    match /users/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines rules for the 'kpi' collection. Allows public read, denies writes.
     * @path /kpi/{kpiId}
     * @allow (get, list) Any user can read KPI data.
     * @deny (create, update, delete) No user can create, update, or delete KPI data.
     * @principle Allows public read-only access.
     */
    match /kpi/{kpiId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines rules for the 'announcements' collection. Allows public read, denies writes.
     * @path /announcements/{announcementId}
     * @allow (get, list) Any user can read announcement data.
     * @deny (create, update, delete) No user can create, update, or delete announcement data.
     * @principle Allows public read-only access.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines rules for the 'productionStatus' collection. Allows public read, denies writes.
     * @path /productionStatus/{statusId}
     * @allow (get, list) Any user can read production status data.
     * @deny (create, update, delete) No user can create, update, or delete production status data.
     * @principle Allows public read-only access.
     */
    match /productionStatus/{statusId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines rules for the 'paymentRequests' collection. Denies all access.
     * @path /paymentRequests/{requestId}
     * @deny (get, list, create, update, delete) No user can access payment requests data.
     * @principle Restricts access to payment requests.
     */
    match /paymentRequests/{requestId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Defines rules for the 'budgets' collection. Denies all access.
     * @path /budgets/{budgetId}
     * @deny (get, list, create, update, delete) No user can access budget data.
     * @principle Restricts access to budget data.
     */
    match /budgets/{budgetId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Defines rules for the 'leaveRequests' collection. Denies all access.
     * @path /leaveRequests/{requestId}
     * @deny (get, list, create, update, delete) No user can access leave request data.
     * @principle Restricts access to leave requests.
     */
    match /leaveRequests/{requestId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Defines rules for the 'userPermissions' collection. Allows access only to the owner.
     * @path /userPermissions/{userId}
     * @allow (get, list) Authenticated user can access their own permissions document.
     * @allow (create, update, delete) Authenticated user can create, update, or delete their own permissions document.
     * @deny (get, list, create, update, delete) User tries to access or modify a permissions document with a userId that doesn't match their auth UID.
     * @principle Enforces strict user-ownership for all operations.
     */
    match /userPermissions/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines rules for the 'helpdeskTickets' collection. Allows owner to access, create, update, and delete
     * @path /helpdeskTickets/{ticketId}
     * @allow (get, list) Authenticated user can access their own ticket.
     * @allow (create) Authenticated user can create their own ticket.
     * @allow (update) Authenticated user can update their own ticket.
     * @allow (delete) Authenticated user can delete their own ticket.
     * @deny (get, list, create, update, delete) User tries to access or modify a ticket with a userId that doesn't match their auth UID.
     * @principle Enforces user-ownership for all operations.
     */
    match /helpdeskTickets/{ticketId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines rules for the 'produksi' collection. Allows public read, denies writes.
     * @path /produksi/{produksiId}
     * @allow (get, list) Any user can read produksi data.
     * @deny (create, update, delete) No user can create, update, or delete produksi data.
     * @principle Allows public read-only access.
     */
    match /produksi/{produksiId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines rules for the 'geologi' collection. Allows public read, denies writes.
     * @path /geologi/{geologiId}
     * @allow (get, list) Any user can read geologi data.
     * @deny (create, update, delete) No user can create, update, or delete geologi data.
     * @principle Allows public read-only access.
     */
    match /geologi/{geologiId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines rules for the 'pengolahan' collection. Allows public read, denies writes.
     * @path /pengolahan/{pengolahanId}
     * @allow (get, list) Any user can read pengolahan data.
     * @deny (create, update, delete) No user can create, update, or delete pengolahan data.
     * @principle Allows public read-only access.
     */
    match /pengolahan/{pengolahanId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines rules for the 'k3l' collection. Allows public read, denies writes.
     * @path /k3l/{k3lId}
     * @allow (get, list) Any user can read K3L data.
     * @deny (create, update, delete) No user can create, update, or delete K3L data.
     * @principle Allows public read-only access.
     */
    match /k3l/{k3lId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines rules for the 'keuangan' collection. Allows public read, denies writes.
     * @path /keuangan/{keuanganId}
     * @allow (get, list) Any user can read keuangan data.
     * @deny (create, update, delete) No user can create, update, or delete keuangan data.
     * @principle Allows public read-only access.
     */
    match /keuangan/{keuanganId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines rules for the 'sdm' collection. Allows public read, denies writes.
     * @path /sdm/{sdmId}
     * @allow (get, list) Any user can read SDM data.
     * @deny (create, update, delete) No user can create, update, or delete SDM data.
     * @principle Allows public read-only access.
     */
    match /sdm/{sdmId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines rules for the 'it' collection. Allows public read, denies writes.
     * @path /it/{itId}
     * @allow (get, list) Any user can read IT data.
     * @deny (create, update, delete) No user can create, update, or delete IT data.
     * @principle Allows public read-only access.
     */
    match /it/{itId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}