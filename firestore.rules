/**
 * @fileoverview Firestore Security Rules for MineVision application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and allows public read access to department-specific data while restricting write access.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /kpi/{kpiId}, /announcements/{announcementId}, /productionStatus/{statusId}, /paymentRequests/{requestId}, /budgets/{budgetId}, /leaveRequests/{requestId}, /userPermissions/{userId}, /helpdeskTickets/{ticketId}, /incidents/{incidentId}, /inventory/{itemId}, /purchaseRequestsSC/{prId}, /shipments/{shipmentId}, /assets/{assetId}, /maintenanceTasks/{taskId}, /generalLedger/{entryId}, /invoices/{invoiceId}, /bills/{billId}, /bankAccounts/{accountId}: Top-level collections for various application data.
 * - /produksi/{produksiId}, /geologi/{geologiId}, /pengolahan/{pengolahanId}, /k3l/{k3lId}, /keuangan/{keuanganId}, /sdm/{sdmId}, /it/{itId}: Top-level collections for department-specific data.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profiles.
 * - Listing of users is disallowed to prevent enumeration.
 * - Department-specific data is publicly readable but only writeable by authorized users (not implemented in this prototyping phase).
 * - Read-only access is granted to department-specific data collections.
 *
 * Note on Department-Specific Data:
 * The original application reasoning marked collections such as `produksi`, `geologi`, etc. as read-only.  However, in a real production application,
 * write access to these collections would need to be controlled via a Role-Based Access Control mechanism (RBAC). This could be achieved by:
 *   1. Adding a `department` field to the User entity.
 *   2. Creating a function `isAuthorizedForDepartment(department)` that checks if the current user's department matches the target department.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) Owner can read, update, and delete their profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (get, update, delete) Non-owner cannot access the profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent user enumeration
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to KPI data, write access is not permitted in this prototype.
     * @path /kpi/{kpiId}
     * @allow (get, list) Any user can read KPI data.
     * @deny (create, update, delete) No user can create, update, or delete KPI data.
     * @principle Allows public read access with restricted writes.
     */
    match /kpi/{kpiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to announcement data, write access is not permitted in this prototype.
     * @path /announcements/{announcementId}
     * @allow (get, list) Any user can read announcement data.
     * @deny (create, update, delete) No user can create, update, or delete announcement data.
     * @principle Allows public read access with restricted writes.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to production status data, write access is not permitted in this prototype.
     * @path /productionStatus/{statusId}
     * @allow (get, list) Any user can read production status data.
     * @deny (create, update, delete) No user can create, update, or delete production status data.
     * @principle Allows public read access with restricted writes.
     */
    match /productionStatus/{statusId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to payment request data, write access is not permitted in this prototype.
     * @path /paymentRequests/{requestId}
     * @allow (get, list) Any user can read payment request data.
     * @deny (create, update, delete) No user can create, update, or delete payment request data.
     * @principle Allows public read access with restricted writes.
     */
    match /paymentRequests/{requestId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to budget data, write access is not permitted in this prototype.
     * @path /budgets/{budgetId}
     * @allow (get, list) Any user can read budget data.
     * @deny (create, update, delete) No user can create, update, or delete budget data.
     * @principle Allows public read access with restricted writes.
     */
    match /budgets/{budgetId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to leave request data, write access is not permitted in this prototype.
     * @path /leaveRequests/{requestId}
     * @allow (get, list) Any user can read leave request data.
     * @deny (create, update, delete) No user can create, update, or delete leave request data.
     * @principle Allows public read access with restricted writes.
     */
    match /leaveRequests/{requestId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Allows public read access to user permissions data, write access is not permitted in this prototype.
      * @path /userPermissions/{userId}
      * @allow (get, list) Any user can read user permissions data.
      * @deny (create, update, delete) No user can create, update, or delete user permissions data.
      * @principle Allows public read access with restricted writes.
      */
     match /userPermissions/{userId} {
       allow get, list: if true;
       allow create, update, delete: if false;
     }

    /**
     * @description Allows public read access to helpdesk ticket data, write access is not permitted in this prototype.
     * @path /helpdeskTickets/{ticketId}
     * @allow (get, list) Any user can read helpdesk ticket data.
     * @deny (create, update, delete) No user can create, update, or delete helpdesk ticket data.
     * @principle Allows public read access with restricted writes.
     */
    match /helpdeskTickets/{ticketId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

   /**
    * @description Allows public read access to incidents data, write access is not permitted in this prototype.
    * @path /incidents/{incidentId}
    * @allow (get, list) Any user can read incident data.
    * @deny (create, update, delete) No user can create, update, or delete incident data.
    * @principle Allows public read access with restricted writes.
    */
   match /incidents/{incidentId} {
     allow get, list: if true;
     allow create, update, delete: if false;
   }

    /**
     * @description Allows public read access to inventory data, write access is not permitted in this prototype.
     * @path /inventory/{itemId}
     * @allow (get, list) Any user can read inventory data.
     * @deny (create, update, delete) No user can create, update, or delete inventory data.
     * @principle Allows public read access with restricted writes.
     */
    match /inventory/{itemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to purchase request data, write access is not permitted in this prototype.
     * @path /purchaseRequestsSC/{prId}
     * @allow (get, list) Any user can read purchase request data.
     * @deny (create, update, delete) No user can create, update, or delete purchase request data.
     * @principle Allows public read access with restricted writes.
     */
    match /purchaseRequestsSC/{prId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to shipment data, write access is not permitted in this prototype.
     * @path /shipments/{shipmentId}
     * @allow (get, list) Any user can read shipment data.
     * @deny (create, update, delete) No user can create, update, or delete shipment data.
     * @principle Allows public read access with restricted writes.
     */
    match /shipments/{shipmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to asset data, write access is not permitted in this prototype.
     * @path /assets/{assetId}
     * @allow (get, list) Any user can read asset data.
     * @deny (create, update, delete) No user can create, update, or delete asset data.
     * @principle Allows public read access with restricted writes.
     */
    match /assets/{assetId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to maintenance task data, write access is not permitted in this prototype.
     * @path /maintenanceTasks/{taskId}
     * @allow (get, list) Any user can read maintenance task data.
     * @deny (create, update, delete) No user can create, update, or delete maintenance task data.
     * @principle Allows public read access with restricted writes.
     */
    match /maintenanceTasks/{taskId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to general ledger entry data, write access is not permitted in this prototype.
     * @path /generalLedger/{entryId}
     * @allow (get, list) Any user can read general ledger entry data.
     * @deny (create, update, delete) No user can create, update, or delete general ledger entry data.
     */
    match /generalLedger/{entryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to invoice data, write access is not permitted in this prototype.
     * @path /invoices/{invoiceId}
     * @allow (get, list) Any user can read invoice data.
     * @deny (create, update, delete) No user can create, update, or delete invoice data.
     */
    match /invoices/{invoiceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to bill data, write access is not permitted in this prototype.
     * @path /bills/{billId}
     * @allow (get, list) Any user can read bill data.
     * @deny (create, update, delete) No user can create, update, or delete bill data.
     */
    match /bills/{billId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to bank account data, write access is not permitted in this prototype.
     * @path /bankAccounts/{accountId}
     * @allow (get, list) Any user can read bank account data.
     * @deny (create, update, delete) No user can create, update, or delete bank account data.
     */
    match /bankAccounts/{accountId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to produksi data, write access is not permitted in this prototype.
     * @path /produksi/{produksiId}
     * @allow (get, list) Any user can read produksi data.
     * @deny (create, update, delete) No user can create, update, or delete produksi data.
     * @principle Allows public read access with restricted writes.
     */
    match /produksi/{produksiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to geologi data, write access is not permitted in this prototype.
     * @path /geologi/{geologiId}
     * @allow (get, list) Any user can read geologi data.
     * @deny (create, update, delete) No user can create, update, or delete geologi data.
     * @principle Allows public read access with restricted writes.
     */
    match /geologi/{geologiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to pengolahan data, write access is not permitted in this prototype.
     * @path /pengolahan/{pengolahanId}
     * @allow (get, list) Any user can read pengolahan data.
     * @deny (create, update, delete) No user can create, update, or delete pengolahan data.
     * @principle Allows public read access with restricted writes.
     */
    match /pengolahan/{pengolahanId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to k3l data, write access is not permitted in this prototype.
     * @path /k3l/{k3lId}
     * @allow (get, list) Any user can read k3l data.
     * @deny (create, update, delete) No user can create, update, or delete k3l data.
     * @principle Allows public read access with restricted writes.
     */
    match /k3l/{k3lId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to keuangan data, write access is not permitted in this prototype.
     * @path /keuangan/{keuanganId}
     * @allow (get, list) Any user can read keuangan data.
     * @deny (create, update, delete) No user can create, update, or delete keuangan data.
     * @principle Allows public read access with restricted writes.
     */
    match /keuangan/{keuanganId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to sdm data, write access is not permitted in this prototype.
     * @path /sdm/{sdmId}
     * @allow (get, list) Any user can read sdm data.
     * @deny (create, update, delete) No user can create, update, or delete sdm data.
     * @principle Allows public read access with restricted writes.
     */
    match /sdm/{sdmId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to it data, write access is not permitted in this prototype.
     * @path /it/{itId}
     * @allow (get, list) Any user can read it data.
     * @deny (create, update, delete) No user can create, update, or delete it data.
     * @principle Allows public read access with restricted writes.
     */
    match /it/{itId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // ================= Helper Functions =================

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

   /**
    * @description Checks if the current user is the owner of the resource, and the resource exists.
    * @param {string} userId The user ID to compare against the authenticated user's ID.
    * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
    */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}