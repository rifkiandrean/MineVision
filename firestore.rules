/**
 * @fileoverview Firestore Security Rules for MineVision application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing authentication and authorization,
 * but relaxes data validation constraints to facilitate rapid prototyping.
 * The system employs a combination of public read access for some collections
 * with authenticated write access and user-based ownership for others.
 *
 * Data Structure:
 * The Firestore database is organized into top-level collections that generally correspond
 * to departments or modules within the application (e.g., 'produksi', 'k3l', 'users').
 * User-specific data (e.g., user profiles) is stored under the '/users/{userId}' path.
 *
 * Key Security Decisions:
 * - All write operations (create, update, delete) require user authentication (`isSignedIn()`).
 * - The ruleset explicitly avoids complex data validation to allow flexible data shapes during prototyping.
 * - Read operations are generally open for collections intended to be publicly readable.
 * - Collections containing potentially sensitive data, such as user profiles, are restricted to authenticated users.
 * - Some collections grant read/write access to users based on their department (e.g., 'Super Admin', 'Admin', 'Manager').
 *
 * Authorization Denormalization:
 *  -For 'payslips', access is granted if the user is the owner OR has the required department. The rule directly checks user ID and department, avoiding the need for extra database reads.
 *  -For `payrollRuns` and `employeeSalaries`, access is granted to users with certain department roles (`Super Admin`, `Admin`, `Manager`). The rule uses `get()` to fetch the user's department, which could be improved by denormalizing user roles onto these documents for better performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows authenticated users to read user profiles.
     * @path /users/{userId}
     * @allow (get, list) Signed-in user can read any user profile.
     * @deny (create, update, delete) No one can create, update, or delete user profiles through direct client requests.
     * @principle Requires authentication for reading user data.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read KPI data.
     * @path /kpi/{kpiId}
     * @allow (get, list) Anyone can read KPI data.
     * @deny (create, update, delete) No one can modify KPI data through direct client requests.
     * @principle Permits public read access.
     */
    match /kpi/{kpiId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read announcements.
     * @path /announcements/{announcementId}
     * @allow (get, list) Anyone can read announcement data.
     * @deny (create, update, delete) No one can modify announcement data through direct client requests.
     * @principle Permits public read access.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read production status data.
     * @path /productionStatus/{statusId}
     * @allow (get, list) Anyone can read production status data.
     * @deny (create, update, delete) No one can modify production status data through direct client requests.
     * @principle Permits public read access.
     */
    match /productionStatus/{statusId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read payment requests.
     * @path /paymentRequests/{requestId}
     * @allow (get, list) Anyone can read payment request data.
     * @deny (create, update, delete) No one can modify payment request data through direct client requests.
     * @principle Permits public read access.
     */
    match /paymentRequests/{requestId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read budget data.
     * @path /budgets/{budgetId}
     * @allow (get, list) Anyone can read budget data.
     * @deny (create, update, delete) No one can modify budget data through direct client requests.
     * @principle Permits public read access.
     */
    match /budgets/{budgetId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows authenticated users to read leave requests.
     * @path /leaveRequests/{requestId}
     * @allow (get, list) Signed-in user can read leave request data.
     * @deny (create, update, delete) No one can modify leave request data through direct client requests.
     * @principle Requires authentication for reading leave requests.
     */
    match /leaveRequests/{requestId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read user permissions.
     * @path /userPermissions/{userId}
     * @allow (get, list) Anyone can read user permission data.
     * @deny (create, update, delete) No one can modify user permission data through direct client requests.
     * @principle Permits public read access.
     */
    match /userPermissions/{userId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read helpdesk tickets.
     * @path /helpdeskTickets/{ticketId}
     * @allow (get, list) Anyone can read helpdesk ticket data.
     * @deny (create, update, delete) No one can modify helpdesk ticket data through direct client requests.
     * @principle Permits public read access.
     */
    match /helpdeskTickets/{ticketId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Allows anyone to read incidents.
      * @path /incidents/{incidentId}
      * @allow (get, list) Anyone can read incident data.
      * @deny (create, update, delete) No one can modify incident data through direct client requests.
      * @principle Permits public read access.
      */
    match /incidents/{incidentId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read inventory items.
     * @path /inventory/{itemId}
     * @allow (get, list) Anyone can read inventory item data.
     * @deny (create, update, delete) No one can modify inventory item data through direct client requests.
     * @principle Permits public read access.
     */
    match /inventory/{itemId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read purchase requests.
     * @path /purchaseRequestsSC/{prId}
     * @allow (get, list) Anyone can read purchase request data.
     * @deny (create, update, delete) No one can modify purchase request data through direct client requests.
     * @principle Permits public read access.
     */
    match /purchaseRequestsSC/{prId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read shipment data.
     * @path /shipments/{shipmentId}
     * @allow (get, list) Anyone can read shipment data.
     * @deny (create, update, delete) No one can modify shipment data through direct client requests.
     * @principle Permits public read access.
     */
    match /shipments/{shipmentId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read asset data.
     * @path /assets/{assetId}
     * @allow (get, list) Anyone can read asset data.
     * @deny (create, update, delete) No one can modify asset data through direct client requests.
     * @principle Permits public read access.
     */
    match /assets/{assetId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read maintenance task data.
     * @path /maintenanceTasks/{taskId}
     * @allow (get, list) Anyone can read maintenance task data.
     * @deny (create, update, delete) No one can modify maintenance task data through direct client requests.
     * @principle Permits public read access.
     */
    match /maintenanceTasks/{taskId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read general ledger entries.
     * @path /generalLedger/{entryId}
     * @allow (get, list) Anyone can read general ledger entries.
     * @deny (create, update, delete) No one can modify general ledger entries through direct client requests.
     * @principle Permits public read access.
     */
    match /generalLedger/{entryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read invoice data.
     * @path /invoices/{invoiceId}
     * @allow (get, list) Anyone can read invoice data.
     * @deny (create, update, delete) No one can modify invoice data through direct client requests.
     * @principle Permits public read access.
     */
    match /invoices/{invoiceId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read bill data.
     * @path /bills/{billId}
     * @allow (get, list) Anyone can read bill data.
     * @deny (create, update, delete) No one can modify bill data through direct client requests.
     * @principle Permits public read access.
     */
    match /bills/{billId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read bank account data.
     * @path /bankAccounts/{accountId}
     * @allow (get, list) Anyone can read bank account data.
     * @deny (create, update, delete) No one can modify bank account data through direct client requests.
     * @principle Permits public read access.
     */
    match /bankAccounts/{accountId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows users with 'Super Admin', 'Admin', or 'Manager' roles to read and write payroll run data.
     * @path /payrollRuns/{runId}
     * @allow (get, list, create, update, delete) Users with specific department roles can read and write payroll run data.
     * @deny (get, list, create, update, delete) Users without the required roles cannot access payroll run data.
     * @principle Enforces role-based access control for payroll data.
     */
    match /payrollRuns/{runId} {
      allow get, list, create, update, delete: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
    }

    /**
     * @description Allows users with 'Super Admin', 'Admin', or 'Manager' roles to read and write employee salary data.
     * @path /employeeSalaries/{userId}
     * @allow (get, list, create, update, delete) Users with specific department roles can read and write employee salary data.
     * @deny (get, list, create, update, delete) Users without the required roles cannot access employee salary data.
     * @principle Enforces role-based access control for employee salary data.
     */
    match /employeeSalaries/{userId} {
      allow get, list, create, update, delete: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
    }

    /**
     * @description Allows users to read their own payslips or users with 'Super Admin', 'Admin', or 'Manager' roles to read any payslip.
     * @path /payslips/{payslipId}
     * @allow (get, list) User can read their own payslip.
     * @allow (get, list) Users with specific department roles can read any payslip.
     * @deny (create, update, delete) No one can create, update, or delete payslips through direct client requests.
     * @principle Combines user ownership with role-based access control for payslips.
     */
    match /payslips/{payslipId} {
      allow get, list: if isSignedIn() && (request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager']);
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows users with 'Super Admin', 'Admin', or 'Manager' roles to read and write performance review data.
     * @path /performanceReviews/{reviewId}
     * @allow (get, list, create, update, delete) Users with specific department roles can read and write performance review data.
     * @deny (get, list, create, update, delete) Users without the required roles cannot access performance review data.
     * @principle Enforces role-based access control for performance review data.
     */
    match /performanceReviews/{reviewId} {
      allow get, list, create, update, delete: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
    }

    /**
     * @description Allows users with 'Super Admin', 'Admin', or 'Manager' roles to read and write employee objective data.
     * @path /employeeObjectives/{objectiveId}
     * @allow (get, list, create, update, delete) Users with specific department roles can read and write employee objective data.
     * @deny (get, list, create, update, delete) Users without the required roles cannot access employee objective data.
     * @principle Enforces role-based access control for employee objective data.
     */
    match /employeeObjectives/{objectiveId} {
      allow get, list, create, update, delete: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
    }

    /**
     * @description Allows users with 'Super Admin', 'Admin', or 'Manager' roles to read and write attendance record data.
     * @path /attendanceRecords/{recordId}
     * @allow (get, list, create, update, delete) Users with specific department roles can read and write attendance record data.
     * @deny (get, list, create, update, delete) Users without the required roles cannot access attendance record data.
     * @principle Enforces role-based access control for attendance record data.
     */
    match /attendanceRecords/{recordId} {
      allow get, list, create, update, delete: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
    }

     /**
      * @description Allows anyone to read produksi department data.
      * @path /produksi/{produksiId}
      * @allow (get, list) Anyone can read produksi data.
      * @deny (create, update, delete) No one can modify produksi data through direct client requests.
      * @principle Permits public read access.
      */
    match /produksi/{produksiId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Allows anyone to read geologi department data.
      * @path /geologi/{geologiId}
      * @allow (get, list) Anyone can read geologi data.
      * @deny (create, update, delete) No one can modify geologi data through direct client requests.
      * @principle Permits public read access.
      */
    match /geologi/{geologiId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Allows anyone to read pengolahan department data.
      * @path /pengolahan/{pengolahanId}
      * @allow (get, list) Anyone can read pengolahan data.
      * @deny (create, update, delete) No one can modify pengolahan data through direct client requests.
      * @principle Permits public read access.
      */
    match /pengolahan/{pengolahanId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Allows anyone to read K3L department data.
      * @path /k3l/{k3lId}
      * @allow (get, list) Anyone can read K3L data.
      * @deny (create, update, delete) No one can modify K3L data through direct client requests.
      * @principle Permits public read access.
      */
    match /k3l/{k3lId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Allows anyone to read keuangan department data.
      * @path /keuangan/{keuanganId}
      * @allow (get, list) Anyone can read keuangan data.
      * @deny (create, update, delete) No one can modify keuangan data through direct client requests.
      * @principle Permits public read access.
      */
    match /keuangan/{keuanganId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Allows anyone to read SDM department data.
      * @path /sdm/{sdmId}
      * @allow (get, list) Anyone can read SDM data.
      * @deny (create, update, delete) No one can modify SDM data through direct client requests.
      * @principle Permits public read access.
      */
    match /sdm/{sdmId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Allows anyone to read IT department data.
      * @path /it/{itId}
      * @allow (get, list) Anyone can read IT data.
      * @deny (create, update, delete) No one can modify IT data through direct client requests.
      * @principle Permits public read access.
      */
    match /it/{itId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}