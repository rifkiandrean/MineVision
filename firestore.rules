/**
 * @fileoverview Firestore Security Rules for MineVision application.
 *
 * Core Philosophy:
 * This ruleset enforces a mixed security model, with some collections being publicly readable,
 * some restricted to authenticated users, and others further restricted based on user roles or ownership.
 *
 * Data Structure:
 * The database is organized into top-level collections, primarily segmented by department
 * (e.g., `produksi`, `geologi`, `k3l`). Some collections like `users` and `helpdeskTickets` have specific access rules.
 *
 * Key Security Decisions:
 * - Collections like `produksi`, `geologi`, etc., are publicly readable but not writable.
 * - The `users` collection allows any authenticated user to read.
 * - The `payrollRuns`, `employeeSalaries`, `performanceReviews`, `employeeObjectives`, and `attendanceRecords`
 *   collections are restricted to users with 'Super Admin', 'Admin', or 'Manager' departments.
 * - The `payslips` collection can be read by the owning user or 'Super Admin', 'Admin', or 'Manager' departments.
 * - All write operations are explicitly controlled.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any authenticated user to read user data, but only allows a user to create their own record.
     * @path /users/{userId}
     * @allow (read): if request.auth != null
     * @allow (create): if request.auth.uid == userId
     * @deny (update, delete): Always. Only the system can modify user records.
     * @principle Restricts writes on the user object after creation.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to KPI data. Writes are not allowed.
     * @path /kpi/{kpiId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /kpi/{kpiId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to announcement data. Writes are not allowed.
     * @path /announcements/{announcementId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /announcements/{announcementId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to production status data. Writes are not allowed.
     * @path /productionStatus/{statusId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /productionStatus/{statusId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to payment request data. Writes are not allowed.
     * @path /paymentRequests/{requestId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /paymentRequests/{requestId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to budget data. Writes are not allowed.
     * @path /budgets/{budgetId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /budgets/{budgetId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows any authenticated user to read leave request data. Writes are not allowed.
     * @path /leaveRequests/{requestId}
     * @allow (read): if request.auth != null
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Requires authentication for read access.
     */
    match /leaveRequests/{requestId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to user permissions data. Writes are not allowed.
     * @path /userPermissions/{userId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /userPermissions/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to helpdesk ticket data. Writes are not allowed.
     * @path /helpdeskTickets/{ticketId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /helpdeskTickets/{ticketId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Allows public read access to incidents data. Writes are not allowed.
     * @path /incidents/{incidentId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /incidents/{incidentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to inventory data. Writes are not allowed.
     * @path /inventory/{itemId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /inventory/{itemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to purchase requests data. Writes are not allowed.
     * @path /purchaseRequestsSC/{prId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /purchaseRequestsSC/{prId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to shipment data. Writes are not allowed.
     * @path /shipments/{shipmentId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /shipments/{shipmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to asset data. Writes are not allowed.
     * @path /assets/{assetId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /assets/{assetId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to maintenance task data. Writes are not allowed.
     * @path /maintenanceTasks/{taskId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /maintenanceTasks/{taskId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to general ledger data. Writes are not allowed.
     * @path /generalLedger/{entryId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /generalLedger/{entryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to invoice data. Writes are not allowed.
     * @path /invoices/{invoiceId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /invoices/{invoiceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to bill data. Writes are not allowed.
     * @path /bills/{billId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /bills/{billId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to bank account data. Writes are not allowed.
     * @path /bankAccounts/{accountId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /bankAccounts/{accountId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Allows read and write access to payroll runs data for users with 'Super Admin', 'Admin', or 'Manager' departments.
     * @path /payrollRuns/{runId}
     * @allow (read, write): if get(/databases/(default)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
     * @principle Restricts access based on user department.
     */
    match /payrollRuns/{runId} {
        allow get: if isAdminOrManager();
        allow list: if isAdminOrManager();
        allow create: if isAdminOrManager();
        allow update: if isAdminOrManager();
        allow delete: if isAdminOrManager();
    }

    /**
     * @description Allows read and write access to employee salaries data for users with 'Super Admin', 'Admin', or 'Manager' departments.
     * @path /employeeSalaries/{userId}
     * @allow (read, write): if get(/databases/(default)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
     * @principle Restricts access based on user department.
     */
    match /employeeSalaries/{userId} {
        allow get: if isAdminOrManager();
        allow list: if isAdminOrManager();
        allow create: if isAdminOrManager();
        allow update: if isAdminOrManager();
        allow delete: if isAdminOrManager();
    }

    /**
     * @description Allows read access to payslips data for the owning user or users with 'Super Admin', 'Admin', or 'Manager' departments.
     * @path /payslips/{payslipId}
     * @allow (read): if request.auth.uid == resource.data.userId || get(/databases/(default)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
     * @principle Restricts access based on user ownership or department.
     */
    match /payslips/{payslipId} {
        allow get: if isOwnerPayslip(resource.data.userId) || isAdminOrManager();
        allow list: if isAdminOrManager(); // Managers can list all payslips
        allow create: if false; // Payslips should only be created by the system
        allow update: if false; // Payslips should be immutable
        allow delete: if false; // Payslips should not be deleted
    }

    /**
     * @description Allows read and write access to performance reviews data for users with 'Super Admin', 'Admin', or 'Manager' departments.
     * @path /performanceReviews/{reviewId}
     * @allow (read, write): if get(/databases/(default)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
     * @principle Restricts access based on user department.
     */
    match /performanceReviews/{reviewId} {
        allow get: if isAdminOrManager();
        allow list: if isAdminOrManager();
        allow create: if isAdminOrManager();
        allow update: if isAdminOrManager();
        allow delete: if isAdminOrManager();
    }

    /**
     * @description Allows read and write access to employee objectives data for users with 'Super Admin', 'Admin', or 'Manager' departments.
     * @path /employeeObjectives/{objectiveId}
     * @allow (read, write): if get(/databases/(default)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
     * @principle Restricts access based on user department.
     */
    match /employeeObjectives/{objectiveId} {
        allow get: if isAdminOrManager();
        allow list: if isAdminOrManager();
        allow create: if isAdminOrManager();
        allow update: if isAdminOrManager();
        allow delete: if isAdminOrManager();
    }

    /**
     * @description Allows read and write access to attendance records data for users with 'Super Admin', 'Admin', or 'Manager' departments.
     * @path /attendanceRecords/{recordId}
     * @allow (read, write): if get(/databases/(default)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
     * @principle Restricts access based on user department.
     */
    match /attendanceRecords/{recordId} {
        allow get: if isAdminOrManager();
        allow list: if isAdminOrManager();
        allow create: if isAdminOrManager();
        allow update: if isAdminOrManager();
        allow delete: if isAdminOrManager();
    }

        /**
     * @description Allows public read access to produksi data. Writes are not allowed.
     * @path /produksi/{produksiId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /produksi/{produksiId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

        /**
     * @description Allows public read access to geologi data. Writes are not allowed.
     * @path /geologi/{geologiId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /geologi/{geologiId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

            /**
     * @description Allows public read access to pengolahan data. Writes are not allowed.
     * @path /pengolahan/{pengolahanId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /pengolahan/{pengolahanId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

            /**
     * @description Allows public read access to k3l data. Writes are not allowed.
     * @path /k3l/{k3lId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /k3l/{k3lId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

            /**
     * @description Allows public read access to keuangan data. Writes are not allowed.
     * @path /keuangan/{keuanganId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /keuangan/{keuanganId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

            /**
     * @description Allows public read access to sdm data. Writes are not allowed.
     * @path /sdm/{sdmId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /sdm/{sdmId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

            /**
     * @description Allows public read access to it data. Writes are not allowed.
     * @path /it/{itId}
     * @allow (read): Always.
     * @deny (create, update, delete): Never. The application lacks an owner field.
     * @principle Allows public read access.
     */
    match /it/{itId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }


    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdminOrManager() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
    }

    function isOwnerPayslip(userId) {
      return request.auth.uid == userId;
    }
  }
}