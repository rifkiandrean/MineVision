/**
 * @fileoverview Firestore Security Rules for MineVision application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and public-read/owner-write access patterns.
 * User-specific data (e.g., user profiles, leave requests) is protected using an ownership model,
 * while general data (e.g., KPIs, announcements, department data) is publicly readable but writable only under specific authorization.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the owning user.
 * - /kpi/{kpiId}, /announcements/{announcementId}, /productionStatus/{statusId}: Publicly readable collections for dashboard data.
 * - /paymentRequests/{requestId}: Stores payment requests.
 * - /budgets/{budgetId}: Stores budget data.
 * - /leaveRequests/{requestId}: Stores leave requests.
 * - /userPermissions/{userId}: Stores user permissions.
 * - /produksi/{produksiId}, /geologi/{geologiId}, /pengolahan/{pengolahanId}, /k3l/{k3lId}, /keuangan/{keuanganId}, /sdm/{sdmId}, /it/{itId}: Publicly readable collections for department-specific data.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Read-only collections for department data are implemented to reduce complexity and cost.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 * The rules do not currently denormalize any data. This can be optimized in future iterations.
 * For example, adding a `requestorId` field to `/paymentRequests/{requestId}` could simplify the rules.
 *
 * Structural Segregation:
 * Publicly readable data (KPIs, announcements, department data) is stored in separate top-level collections,
 * distinct from user-private data, improving security and query performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with uid 'user123' can create their profile.
     * @allow (get,update,delete) User with uid 'user123' can read, update, and delete their profile.
     * @deny (create) User with uid 'user456' cannot create a profile with ID 'user123'.
     * @deny (get,update,delete) User with uid 'user456' cannot read, update, or delete the profile of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Grants read access to KPIs for all users. Only authenticated users can create, update or delete them.
     * @path /kpi/{kpiId}
     * @allow (get,list) Any user can read KPI data.
     * @deny (create,update,delete) Anonymous user cannot modify KPIs.
     * @principle Public read, restricted write access.
     */
    match /kpi/{kpiId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants read access to announcements for all users. Only authenticated users can create, update or delete them.
     * @path /announcements/{announcementId}
     * @allow (get,list) Any user can read announcement data.
     * @deny (create,update,delete) Anonymous user cannot modify announcements.
     * @principle Public read, restricted write access.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants read access to production statuses for all users. Only authenticated users can create, update or delete them.
     * @path /productionStatus/{statusId}
     * @allow (get,list) Any user can read production status data.
     * @deny (create,update,delete) Anonymous user cannot modify production statuses.
     * @principle Public read, restricted write access.
     */
    match /productionStatus/{statusId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants access to payment requests.
     * @path /paymentRequests/{requestId}
     * @allow (get,list) Any user can read payment request data.
     * @deny (create,update,delete) Anonymous user cannot modify payment requests.
     * @principle Public read, restricted write access.
     */
    match /paymentRequests/{requestId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants access to budget data.
     * @path /budgets/{budgetId}
     * @allow (get,list) Any user can read budget data.
     * @deny (create,update,delete) Anonymous user cannot modify budget data.
     * @principle Public read, restricted write access.
     */
    match /budgets/{budgetId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants access to leave requests.
     * @path /leaveRequests/{requestId}
     * @allow (get,list) Any user can read leave request data.
     * @deny (create,update,delete) Anonymous user cannot modify leave requests.
     * @principle Public read, restricted write access.
     */
    match /leaveRequests/{requestId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants access to user permissions.
     * @path /userPermissions/{userId}
     * @allow (get) User with uid 'user123' can read their own permissions.
     * @deny (get) User with uid 'user456' cannot read the permissions of user 'user123'.
     * @principle Enforces document ownership for reads.
     */
    match /userPermissions/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants public read access to Produksi data.
     * @path /produksi/{produksiId}
     * @allow (get,list) Any user can read Produksi data.
     * @deny (create,update,delete) No user can modify Produksi data.
     * @principle Public read, no write access.
     */
    match /produksi/{produksiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to Geologi data.
     * @path /geologi/{geologiId}
     * @allow (get,list) Any user can read Geologi data.
     * @deny (create,update,delete) No user can modify Geologi data.
     * @principle Public read, no write access.
     */
    match /geologi/{geologiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to Pengolahan data.
     * @path /pengolahan/{pengolahanId}
     * @allow (get,list) Any user can read Pengolahan data.
     * @deny (create,update,delete) No user can modify Pengolahan data.
     * @principle Public read, no write access.
     */
    match /pengolahan/{pengolahanId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to K3L data.
     * @path /k3l/{k3lId}
     * @allow (get,list) Any user can read K3L data.
     * @deny (create,update,delete) No user can modify K3L data.
     * @principle Public read, no write access.
     */
    match /k3l/{k3lId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to Keuangan data.
     * @path /keuangan/{keuanganId}
     * @allow (get,list) Any user can read Keuangan data.
     * @deny (create,update,delete) No user can modify Keuangan data.
     * @principle Public read, no write access.
     */
    match /keuangan/{keuanganId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to SDM data.
     * @path /sdm/{sdmId}
     * @allow (get,list) Any user can read SDM data.
     * @deny (create,update,delete) No user can modify SDM data.
     * @principle Public read, no write access.
     */
    match /sdm/{sdmId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to IT data.
     * @path /it/{itId}
     * @allow (get,list) Any user can read IT data.
     * @deny (create,update,delete) No user can modify IT data.
     * @principle Public read, no write access.
     */
    match /it/{itId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}