/**
 * @fileOverview Firestore Security Rules for MineVision application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of ownership-based access for user profiles
 * and public read-only access for department-specific data. Certain collections 
 * require Admin, Manager, or Super Admin roles for write access.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile data; accessible only by the owner (the user themselves).
 * - Top-Level Department Collections (`/produksi`, `/geologi`, etc.): Intended for public read-only access.
 * - Payroll-Related Collections (`/payrollRuns`, `/employeeSalaries`, `/payslips`): Restricted to Admin, Manager, or Super Admin roles.
 * - Performance Review-Related Collections (`/performanceReviews`, `/employeeObjectives`): Restricted to Admin, Manager, or Super Admin roles.
 * - Other Top-Level Collections (`/kpi`, `/announcements`, etc.): Open read/write access
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data in `/users/{userId}`.
 * - Listing of all users is denied to prevent information disclosure.
 * - Department-specific data collections are publicly readable.
 *
 * Denormalization for Authorization:
 * - The `payslips` collection uses a denormalized `userId` field to allow quick validation of ownership.
 *
 * Structural Segregation:
 * - Publicly readable data is stored in top-level collections, separate from user-specific data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile data, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (read, write) if the request.auth.uid matches the {userId} in the path.
     *   Example: A user with UID "user123" can read/write the document at /users/user123.
     * @deny (read, write) if the request.auth.uid does not match the {userId} in the path.
     *   Example: A user with UID "user456" cannot read/write the document at /users/user123.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing all users is denied.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Secures KPI data, allowing anyone to read and write.
     * @path /kpi/{kpiId}
     * @allow (read, write) Allow all read and write requests.
     * @principle Public data with no restrictions.
     */
    match /kpi/{kpiId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures announcement data, allowing anyone to read and write.
     * @path /announcements/{announcementId}
     * @allow (read, write) Allow all read and write requests.
     * @principle Public data with no restrictions.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures production status data, allowing anyone to read and write.
     * @path /productionStatus/{statusId}
     * @allow (read, write) Allow all read and write requests.
     * @principle Public data with no restrictions.
     */
    match /productionStatus/{statusId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures payment request data, allowing anyone to read and write.
     * @path /paymentRequests/{requestId}
     * @allow (read, write) Allow all read and write requests.
     * @principle Public data with no restrictions.
     */
    match /paymentRequests/{requestId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures budget data, allowing anyone to read and write.
     * @path /budgets/{budgetId}
     * @allow (read, write) Allow all read and write requests.
     * @principle Public data with no restrictions.
     */
    match /budgets/{budgetId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures leave request data, allowing anyone to read and write.
     * @path /leaveRequests/{requestId}
     * @allow (read, write) Allow all read and write requests.
     * @principle Public data with no restrictions.
     */
    match /leaveRequests/{requestId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures user permissions data, allowing anyone to read and write.
     * @path /userPermissions/{userId}
     * @allow (read, write) Allow all read and write requests.
     * @principle Public data with no restrictions.
     */
    match /userPermissions/{userId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures helpdesk tickets data, allowing anyone to read and write.
     * @path /helpdeskTickets/{ticketId}
     * @allow (read, write) Allow all read and write requests.
     * @principle Public data with no restrictions.
     */
    match /helpdeskTickets/{ticketId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures K3L incidents data, allowing anyone to read and write.
     * @path /incidents/{incidentId}
     * @allow (read, write) Allow all read and write requests.
     * @principle Public data with no restrictions.
     */
    match /incidents/{incidentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures inventory data, allowing anyone to read and write.
     * @path /inventory/{itemId}
     * @allow (read, write) Allow all read and write requests.
     * @principle Public data with no restrictions.
     */
    match /inventory/{itemId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures purchase request data, allowing anyone to read and write.
     * @path /purchaseRequestsSC/{prId}
     * @allow (read, write) Allow all read and write requests.
     * @principle Public data with no restrictions.
     */
    match /purchaseRequestsSC/{prId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures shipment data, allowing anyone to read and write.
     * @path /shipments/{shipmentId}
     * @allow (read, write) Allow all read and write requests.
     * @principle Public data with no restrictions.
     */
    match /shipments/{shipmentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures asset data, allowing anyone to read and write.
     * @path /assets/{assetId}
     * @allow (read, write) Allow all read and write requests.
     * @principle Public data with no restrictions.
     */
    match /assets/{assetId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures maintenance task data, allowing anyone to read and write.
     * @path /maintenanceTasks/{taskId}
     * @allow (read, write) Allow all read and write requests.
     * @principle Public data with no restrictions.
     */
    match /maintenanceTasks/{taskId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures general ledger data, allowing anyone to read and write.
     * @path /generalLedger/{entryId}
     * @allow (read, write) Allow all read and write requests.
     * @principle Public data with no restrictions.
     */
    match /generalLedger/{entryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures invoice data, allowing anyone to read and write.
     * @path /invoices/{invoiceId}
     * @allow (read, write) Allow all read and write requests.
     * @principle Public data with no restrictions.
     */
    match /invoices/{invoiceId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures bill data, allowing anyone to read and write.
     * @path /bills/{billId}
     * @allow (read, write) Allow all read and write requests.
     * @principle Public data with no restrictions.
     */
    match /bills/{billId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures bank account data, allowing anyone to read and write.
     * @path /bankAccounts/{accountId}
     * @allow (read, write) Allow all read and write requests.
     * @principle Public data with no restrictions.
     */
    match /bankAccounts/{accountId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secures payroll run data, restricting access to Admin, Manager, or Super Admin roles.
     * @path /payrollRuns/{runId}
     * @allow (read, write) Allow all read and write requests if the user has an Admin, Manager, or Super Admin role.
     * @principle Role-based access control.
     */
    match /payrollRuns/{runId} {
      allow get, list: if isAdminManagerOrSuperAdmin();
      allow create: if isAdminManagerOrSuperAdmin();
      allow update: if isAdminManagerOrSuperAdmin() && resource != null;
      allow delete: if isAdminManagerOrSuperAdmin() && resource != null;
    }

    /**
     * @description Secures employee salary data, restricting access to Admin, Manager, or Super Admin roles.
     * @path /employeeSalaries/{userId}
     * @allow (read, write) Allow all read and write requests if the user has an Admin, Manager, or Super Admin role.
     * @principle Role-based access control.
     */
    match /employeeSalaries/{userId} {
      allow get, list: if isAdminManagerOrSuperAdmin();
      allow create: if isAdminManagerOrSuperAdmin();
      allow update: if isAdminManagerOrSuperAdmin() && resource != null;
      allow delete: if isAdminManagerOrSuperAdmin() && resource != null;
    }

    /**
     * @description Secures payslip data, allowing access to the owner or users with Admin, Manager, or Super Admin roles.
     * @path /payslips/{payslipId}
     * @allow (read) Allow read access to the owner or users with Admin, Manager, or Super Admin roles.
     * @principle Ownership-based access control with role-based override.
     */
    match /payslips/{payslipId} {
      allow get: if isPayslipOwner() || isAdminManagerOrSuperAdmin();
      allow list: if false;
      allow create: if false; // no one can create a payslip directly
      allow update: if false; // no one can update a payslip directly
      allow delete: if false; // no one can delete a payslip directly
    }

    /**
     * @description Secures performance review data, restricting access to Admin, Manager, or Super Admin roles.
     * @path /performanceReviews/{reviewId}
     * @allow (read, write) Allow all read and write requests if the user has an Admin, Manager, or Super Admin role.
     * @principle Role-based access control.
     */
    match /performanceReviews/{reviewId} {
      allow get, list: if isAdminManagerOrSuperAdmin();
      allow create: if isAdminManagerOrSuperAdmin();
      allow update: if isAdminManagerOrSuperAdmin() && resource != null;
      allow delete: if isAdminManagerOrSuperAdmin() && resource != null;
    }

    /**
     * @description Secures employee objective data, restricting access to Admin, Manager, or Super Admin roles.
     * @path /employeeObjectives/{objectiveId}
     * @allow (read, write) Allow all read and write requests if the user has an Admin, Manager, or Super Admin role.
     * @principle Role-based access control.
     */
    match /employeeObjectives/{objectiveId} {
      allow get, list: if isAdminManagerOrSuperAdmin();
      allow create: if isAdminManagerOrSuperAdmin();
      allow update: if isAdminManagerOrSuperAdmin() && resource != null;
      allow delete: if isAdminManagerOrSuperAdmin() && resource != null;
    }

    /**
     * @description Secures attendance record data, restricting access to Admin, Manager, or Super Admin roles.
     * @path /attendanceRecords/{recordId}
     * @allow (read, write) Allow all read and write requests if the user has an Admin, Manager, or Super Admin role.
     * @principle Role-based access control.
     */
    match /attendanceRecords/{recordId} {
      allow get, list: if isAdminManagerOrSuperAdmin();
      allow create: if isAdminManagerOrSuperAdmin();
      allow update: if isAdminManagerOrSuperAdmin() && resource != null;
      allow delete: if isAdminManagerOrSuperAdmin() && resource != null;
    }
    
    /**
     * @description Secures produksi data, allowing anyone to read.
     * @path /produksi/{produksiId}
     * @allow (read) Allow all read requests.
     * @deny (write) Deny all write requests.
     * @principle Public read-only data.
     */
    match /produksi/{produksiId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Secures geologi data, allowing anyone to read.
     * @path /geologi/{geologiId}
     * @allow (read) Allow all read requests.
     * @deny (write) Deny all write requests.
     * @principle Public read-only data.
     */
    match /geologi/{geologiId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Secures pengolahan data, allowing anyone to read.
     * @path /pengolahan/{pengolahanId}
     * @allow (read) Allow all read requests.
     * @deny (write) Deny all write requests.
     * @principle Public read-only data.
     */
    match /pengolahan/{pengolahanId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Secures k3l data, allowing anyone to read.
     * @path /k3l/{k3lId}
     * @allow (read) Allow all read requests.
     * @deny (write) Deny all write requests.
     * @principle Public read-only data.
     */
    match /k3l/{k3lId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Secures keuangan data, allowing anyone to read.
     * @path /keuangan/{keuanganId}
     * @allow (read) Allow all read requests.
     * @deny (write) Deny all write requests.
     * @principle Public read-only data.
     */
    match /keuangan/{keuanganId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Secures sdm data, allowing anyone to read.
     * @path /sdm/{sdmId}
     * @allow (read) Allow all read requests.
     * @deny (write) Deny all write requests.
     * @principle Public read-only data.
     */
    match /sdm/{sdmId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Secures it data, allowing anyone to read.
     * @path /it/{itId}
     * @allow (read) Allow all read requests.
     * @deny (write) Deny all write requests.
     * @principle Public read-only data.
     */
    match /it/{itId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdminManagerOrSuperAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
    }

    function isPayslipOwner() {
      return isSignedIn() && request.auth.uid == resource.data.userId;
    }
  }
}