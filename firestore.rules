/**
 * @fileoverview Firestore Security Rules for MineVision application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model. User data is strictly controlled
 * by ownership. Most departmental data is publicly readable, but only Rifki Andrean
 * has write access.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the
 *   owning user.
 * - /kpi/{kpiId}: Publicly readable data for key performance indicators.
 * - /announcements/{announcementId}: Publicly readable data for announcements.
 * - /productionStatus/{statusId}: Publicly readable data for production statuses.
 * - /paymentRequests/{requestId}: Publicly readable data for payment requests.
 * - /budgets/{budgetId}: Publicly readable data for budget information.
 * - /leaveRequests/{requestId}: Publicly readable data for leave requests.
 * - /userPermissions/{userId}: Stores application permissions for a specific user. Access is restricted to the owning user.
 * - /produksi/{produksiId}: Publicly readable data for produksi department.
 * - /geologi/{geologiId}: Publicly readable data for geologi department.
 * - /pengolahan/{pengolahanId}: Publicly readable data for pengolahan department.
 * - /k3l/{k3lId}: Publicly readable data for K3L department.
 * - /keuangan/{keuanganId}: Publicly readable data for keuangan department.
 * - /sdm/{sdmId}: Publicly readable data for SDM department.
 * - /it/{itId}: Publicly readable data for IT department.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied.
 * - Default read access is public for department collections.
 * - All write operations are restricted to rifkiandrean@gmail.com, unless explicitly stated otherwise.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isRifkiAndrean() {
        return request.auth.token.email == 'rifkiandrean@gmail.com';
    }

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to KPI documents.
     * @path /kpi/{kpiId}
     */
    match /kpi/{kpiId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isRifkiAndrean();
    }

    /**
     * @description Controls access to announcement documents.
     * @path /announcements/{announcementId}
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isRifkiAndrean();
    }

    /**
     * @description Controls access to production status documents.
     * @path /productionStatus/{statusId}
     */
    match /productionStatus/{statusId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isRifkiAndrean();
    }

    /**
     * @description Controls access to payment request documents.
     * @path /paymentRequests/{requestId}
     */
    match /paymentRequests/{requestId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isRifkiAndrean();
    }

    /**
     * @description Controls access to budget documents.
     * @path /budgets/{budgetId}
     */
    match /budgets/{budgetId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isRifkiAndrean();
    }

    /**
     * @description Controls access to leave request documents.
     * @path /leaveRequests/{requestId}
     */
    match /leaveRequests/{requestId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isRifkiAndrean();
    }

    /**
     * @description Controls access to user permissions documents.
     * @path /userPermissions/{userId}
     */
    match /userPermissions/{userId} {
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if false;
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId);
        allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to produksi documents.
     * @path /produksi/{produksiId}
     */
    match /produksi/{produksiId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isRifkiAndrean();
    }

    /**
     * @description Controls access to geologi documents.
     * @path /geologi/{geologiId}
     */
    match /geologi/{geologiId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isRifkiAndrean();
    }

    /**
     * @description Controls access to pengolahan documents.
     * @path /pengolahan/{pengolahanId}
     */
    match /pengolahan/{pengolahanId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isRifkiAndrean();
    }

    /**
     * @description Controls access to k3l documents.
     * @path /k3l/{k3lId}
     */
    match /k3l/{k3lId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isRifkiAndrean();
    }

    /**
     * @description Controls access to keuangan documents.
     * @path /keuangan/{keuanganId}
     */
    match /keuangan/{keuanganId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isRifkiAndrean();
    }

    /**
     * @description Controls access to sdm documents.
     * @path /sdm/{sdmId}
     */
    match /sdm/{sdmId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isRifkiAndrean();
    }

    /**
     * @description Controls access to it documents.
     * @path /it/{itId}
     */
    match /it/{itId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isRifkiAndrean();
    }
  }
}