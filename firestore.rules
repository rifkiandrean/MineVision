/**
 * @fileoverview Firestore Security Rules for MineVision application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and public-read/owner-write access patterns.
 * User documents are protected by ownership, while most department data is publicly readable but only writable through backend services (not directly by end-users).
 *
 * Data Structure:
 * - /users/{userId}: Stores user-specific data, accessible only by the authenticated user.
 * - /kpi/{kpiId}, /announcements/{announcementId}, /productionStatus/{statusId}: Publicly readable collections for dashboard data. Writes are not allowed directly.
 * - /paymentRequests/{requestId}, /budgets/{budgetId}, /leaveRequests/{requestId}: Publicly readable collections, writable by backend services.
 * - /userPermissions/{userId}: Stores user permissions. Accessible only by the authenticated user.
 * - /produksi/{produksiId}, /geologi/{geologiId}, /pengolahan/{pengolahanId}, /k3l/{k3lId}, /keuangan/{keuanganId}, /sdm/{sdmId}, /it/{itId}: Publicly readable collections for department data. Writes are not allowed directly.
 *
 * Key Security Decisions:
 * - Listing of users is explicitly denied to prevent information disclosure.
 * - Public read access is granted to certain collections to enable easy data display on the dashboard.
 * - All write operations (create, update, delete) are strictly controlled.
 *
 * Denormalization for Authorization:
 *  - Not explicitly used in this version. Future iterations may denormalize user roles directly onto documents to avoid complex queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated (user is signed in).
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the UIDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing resource.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the UIDs match and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own user document.
     * @deny (create) User with UID 'user123' cannot create a user document for 'user456'.
     * @allow (get, update, delete) User with UID 'user123' can read, update, and delete their own user document.
     * @deny (get, update, delete) User with UID 'user123' cannot read, update, or delete user document for 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Do not allow listing of users.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the /kpi/{kpiId} collection.
     * @path /kpi/{kpiId}
     * @allow (get, list) Any user can read KPIs.
     * @deny (create, update, delete) No direct writes allowed.
     * @principle Public read access with no direct write access.
     */
    match /kpi/{kpiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for the /announcements/{announcementId} collection.
     * @path /announcements/{announcementId}
     * @allow (get, list) Any user can read announcements.
     * @deny (create, update, delete) No direct writes allowed.
     * @principle Public read access with no direct write access.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for the /productionStatus/{statusId} collection.
     * @path /productionStatus/{statusId}
     * @allow (get, list) Any user can read production statuses.
     * @deny (create, update, delete) No direct writes allowed.
     * @principle Public read access with no direct write access.
     */
    match /productionStatus/{statusId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for the /paymentRequests/{requestId} collection.
     * @path /paymentRequests/{requestId}
     * @allow (get, list) Any user can read payment requests.
     * @deny (create, update, delete) No direct writes allowed.
     * @principle Public read access with no direct write access.
     */
    match /paymentRequests/{requestId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for the /budgets/{budgetId} collection.
     * @path /budgets/{budgetId}
     * @allow (get, list) Any user can read budgets.
     * @deny (create, update, delete) No direct writes allowed.
     * @principle Public read access with no direct write access.
     */
    match /budgets/{budgetId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for the /leaveRequests/{requestId} collection.
     * @path /leaveRequests/{requestId}
     * @allow (get, list) Any user can read leave requests.
     * @deny (create, update, delete) No direct writes allowed.
     * @principle Public read access with no direct write access.
     */
    match /leaveRequests/{requestId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for the /userPermissions/{userId} collection.
     * @path /userPermissions/{userId}
     * @allow (create) User with UID 'user123' can create their own user permissions document.
     * @deny (create) User with UID 'user123' cannot create a user permissions document for 'user456'.
     * @allow (get, update, delete) User with UID 'user123' can read, update, and delete their own user permissions document.
     * @deny (get, update, delete) User with UID 'user123' cannot read, update, or delete user permissions document for 'user456'.
     */
    match /userPermissions/{userId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the /produksi/{produksiId} collection.
     * @path /produksi/{produksiId}
     * @allow (get, list) Any user can read produksi data.
     * @deny (create, update, delete) No direct writes allowed.
     * @principle Public read access with no direct write access.
     */
    match /produksi/{produksiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for the /geologi/{geologiId} collection.
     * @path /geologi/{geologiId}
     * @allow (get, list) Any user can read geologi data.
     * @deny (create, update, delete) No direct writes allowed.
     * @principle Public read access with no direct write access.
     */
    match /geologi/{geologiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for the /pengolahan/{pengolahanId} collection.
     * @path /pengolahan/{pengolahanId}
     * @allow (get, list) Any user can read pengolahan data.
     * @deny (create, update, delete) No direct writes allowed.
     * @principle Public read access with no direct write access.
     */
    match /pengolahan/{pengolahanId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for the /k3l/{k3lId} collection.
     * @path /k3l/{k3lId}
     * @allow (get, list) Any user can read K3L data.
     * @deny (create, update, delete) No direct writes allowed.
     * @principle Public read access with no direct write access.
     */
    match /k3l/{k3lId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for the /keuangan/{keuanganId} collection.
     * @path /keuangan/{keuanganId}
     * @allow (get, list) Any user can read keuangan data.
     * @deny (create, update, delete) No direct writes allowed.
     * @principle Public read access with no direct write access.
     */
    match /keuangan/{keuanganId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for the /sdm/{sdmId} collection.
     * @path /sdm/{sdmId}
     * @allow (get, list) Any user can read SDM data.
     * @deny (create, update, delete) No direct writes allowed.
     * @principle Public read access with no direct write access.
     */
    match /sdm/{sdmId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for the /it/{itId} collection.
     * @path /it/{itId}
     * @allow (get, list) Any user can read IT data.
     * @deny (create, update, delete) No direct writes allowed.
     * @principle Public read access with no direct write access.
     */
    match /it/{itId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}