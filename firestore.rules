/**
 * @fileOverview Firestore Security Rules for MineVision application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure access based on user roles and explicit data ownership where applicable.
 * It errs on the side of caution, denying access unless explicitly granted. Data shape validation is relaxed
 * in prototyping mode to allow for rapid schema evolution.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profiles, readable by authenticated users.
 * - Top-Level Collections (e.g., `/kpi`, `/announcements`, `/helpdeskTickets`): Data for specific entities.
 *
 * Key Security Decisions:
 * - No user listing: The rules do not allow listing all users.
 * - Strict ownership: Write access is generally restricted to document owners or authorized roles.
 *
 * Denormalization for Authorization:
 *  The payroll system and other modules use `get()` calls to check user roles and grant access accordingly.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows authenticated users to read their own user document.
     * @path /users/{userId}
     * @allow (get, list): if request.auth != null
     * @deny (create, update, delete): always
     * @principle Enforces read access to user profiles only for authenticated users.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn();
      allow list: if false; // Listing all users is not permitted.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read KPI data. Write access is denied.
     * @path /kpi/{kpiId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to KPI data.
     */
    match /kpi/{kpiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read announcement data. Write access is denied.
     * @path /announcements/{announcementId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to announcement data.
     */
    match /announcements/{announcementId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read production status data. Write access is denied.
     * @path /productionStatus/{statusId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to production status data.
     */
    match /productionStatus/{statusId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read payment request data. Write access is denied.
     * @path /paymentRequests/{requestId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to payment requests.
     */
    match /paymentRequests/{requestId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read budget data. Write access is denied.
     * @path /budgets/{budgetId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to budget data.
     */
    match /budgets/{budgetId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows authenticated users to read leave request data. Write access is denied.
     * @path /leaveRequests/{requestId}
     * @allow (get, list): if request.auth != null
     * @deny (create, update, delete): always
     * @principle Allows read access to leave requests only for authenticated users.
     */
    match /leaveRequests/{requestId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows anyone to read user permissions data. Write access is denied.
     * @path /userPermissions/{userId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to user permissions.
     */
    match /userPermissions/{userId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read helpdesk ticket data. Write access is denied.
     * @path /helpdeskTickets/{ticketId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to helpdesk tickets.
     */
    match /helpdeskTickets/{ticketId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

        /**
     * @description Allows anyone to read Incident data. Write access is denied.
     * @path /incidents/{incidentId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to incident reports.
     */
    match /incidents/{incidentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read InventoryItem data. Write access is denied.
     * @path /inventory/{itemId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to inventory items.
     */
    match /inventory/{itemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read PurchaseRequestSC data. Write access is denied.
     * @path /purchaseRequestsSC/{prId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to purchase requests.
     */
    match /purchaseRequestsSC/{prId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read Shipment data. Write access is denied.
     * @path /shipments/{shipmentId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to shipment data.
     */
    match /shipments/{shipmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read Asset data. Write access is denied.
     * @path /assets/{assetId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to asset data.
     */
    match /assets/{assetId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read MaintenanceTask data. Write access is denied.
     * @path /maintenanceTasks/{taskId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to maintenance tasks.
     */
    match /maintenanceTasks/{taskId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read GeneralLedgerEntry data. Write access is denied.
     * @path /generalLedger/{entryId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to general ledger entries.
     */
    match /generalLedger/{entryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read Invoice data. Write access is denied.
     * @path /invoices/{invoiceId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to invoices.
     */
    match /invoices/{invoiceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read Bill data. Write access is denied.
     * @path /bills/{billId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to bills.
     */
    match /bills/{billId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read BankAccount data. Write access is denied.
     * @path /bankAccounts/{accountId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to bank accounts.
     */
    match /bankAccounts/{accountId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows Super Admins, Admins, and Managers to read and write payroll run data.
     * @path /payrollRuns/{runId}
     * @allow (get, list, create, update, delete): if get(/databases/(default)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager']
     * @deny: None
     * @principle Restricts access to payroll run data based on user roles.
     */
    match /payrollRuns/{runId} {
      function isAuthorized() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
      }
      allow get, list, create, update, delete: if isAuthorized();
    }

    /**
     * @description Allows Super Admins, Admins, and Managers to read and write employee salary data.
     * @path /employeeSalaries/{userId}
     * @allow (get, list, create, update, delete): if get(/databases/(default)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager']
     * @deny: None
     * @principle Restricts access to employee salary data based on user roles.
     */
    match /employeeSalaries/{userId} {
      function isAuthorized() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
      }
      allow get, list, create, update, delete: if isAuthorized();
    }

    /**
     * @description Allows employee to read their own payslip data, and Super Admins, Admins, and Managers to read all payslips.
     * @path /payslips/{payslipId}
     * @allow (get, list): if request.auth.uid == resource.data.userId || get(/databases/(default)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager']
     * @deny (create, update, delete): always
     * @principle Restricts access to payslip data based on user roles and ownership.
     */
    match /payslips/{payslipId} {
      function isAuthorizedToRead() {
        return request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
      }
      allow get, list: if isAuthorizedToRead();
      allow create, update, delete: if false;
    }

    /**
     * @description Allows Super Admins, Admins, and Managers to read and write performance review data.
     * @path /performanceReviews/{reviewId}
     * @allow (get, list, create, update, delete): if get(/databases/(default)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager']
     * @deny: None
     * @principle Restricts access to performance review data based on user roles.
     */
    match /performanceReviews/{reviewId} {
      function isAuthorized() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
      }
      allow get, list, create, update, delete: if isAuthorized();
    }

    /**
     * @description Allows Super Admins, Admins, and Managers to read and write employee objective data.
     * @path /employeeObjectives/{objectiveId}
     * @allow (get, list, create, update, delete): if get(/databases/(default)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager']
     * @deny: None
     * @principle Restricts access to employee objective data based on user roles.
     */
    match /employeeObjectives/{objectiveId} {
      function isAuthorized() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
      }
      allow get, list, create, update, delete: if isAuthorized();
    }

    /**
     * @description Allows Super Admins, Admins, and Managers to read and write attendance record data.
     * @path /attendanceRecords/{recordId}
     * @allow (get, list, create, update, delete): if get(/databases/(default)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager']
     * @deny: None
     * @principle Restricts access to attendance record data based on user roles.
     */
    match /attendanceRecords/{recordId} {
      function isAuthorized() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department in ['Super Admin', 'Admin', 'Manager'];
      }
      allow get, list, create, update, delete: if isAuthorized();
    }

    /**
     * @description Allows anyone to read produksi data. Write access is denied.
     * @path /produksi/{produksiId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to produksi data.
     */
    match /produksi/{produksiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read geologi data. Write access is denied.
     * @path /geologi/{geologiId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to geologi data.
     */
    match /geologi/{geologiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read pengolahan data. Write access is denied.
     * @path /pengolahan/{pengolahanId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to pengolahan data.
     */
    match /pengolahan/{pengolahanId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read k3l data. Write access is denied.
     * @path /k3l/{k3lId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to k3l data.
     */
    match /k3l/{k3lId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read keuangan data. Write access is denied.
     * @path /keuangan/{keuanganId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to keuangan data.
     */
    match /keuangan/{keuanganId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read sdm data. Write access is denied.
     * @path /sdm/{sdmId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to sdm data.
     */
    match /sdm/{sdmId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read it data. Write access is denied.
     * @path /it/{itId}
     * @allow (get, list): if true
     * @deny (create, update, delete): always
     * @principle Allows public read access to it data.
     */
    match /it/{itId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}